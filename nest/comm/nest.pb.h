// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nest.proto

#ifndef PROTOBUF_nest_2eproto__INCLUDED
#define PROTOBUF_nest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nest_2eproto();
void protobuf_AssignDesc_nest_2eproto();
void protobuf_ShutdownFile_nest_2eproto();

class nest_msg_head;
class nest_proc_stat;
class nest_proc_base;
class nest_sched_node_init_req;
class nest_sched_node_init_rsp;
class nest_sched_node_term_req;
class nest_service_type;
class nest_sched_load_report_req;
class nest_sched_add_proc_req;
class nest_sched_add_proc_rsp;
class nest_sched_del_proc_req;
class nest_sched_del_proc_rsp;
class nest_sched_restart_proc_req;
class nest_sched_restart_proc_rsp;
class nest_sched_service_info_req;
class nest_sched_service_info_rsp;
class nest_proc_heartbeat_req;
class nest_proc_init_req;
class nest_proc_init_rsp;
class nest_proc_suspend_req;
class nest_proc_stop_req;
class nest_proc_stat_report_req;
class nest_agent_sysload_req;
class nest_agent_sysload_rsp;

// ===================================================================

class nest_msg_head : public ::google::pb::Message {
 public:
  nest_msg_head();
  virtual ~nest_msg_head();
  
  nest_msg_head(const nest_msg_head& from);
  
  inline nest_msg_head& operator=(const nest_msg_head& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_msg_head& default_instance();
  
  void Swap(nest_msg_head* other);
  
  // implements Message ----------------------------------------------
  
  nest_msg_head* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_msg_head& from);
  void MergeFrom(const nest_msg_head& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::google::pb::uint32 msg_type() const;
  inline void set_msg_type(::google::pb::uint32 value);
  
  // optional uint32 sub_cmd = 2;
  inline bool has_sub_cmd() const;
  inline void clear_sub_cmd();
  static const int kSubCmdFieldNumber = 2;
  inline ::google::pb::uint32 sub_cmd() const;
  inline void set_sub_cmd(::google::pb::uint32 value);
  
  // optional uint32 set_id = 3;
  inline bool has_set_id() const;
  inline void clear_set_id();
  static const int kSetIdFieldNumber = 3;
  inline ::google::pb::uint32 set_id() const;
  inline void set_set_id(::google::pb::uint32 value);
  
  // optional uint32 sequence = 4;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 4;
  inline ::google::pb::uint32 sequence() const;
  inline void set_sequence(::google::pb::uint32 value);
  
  // optional uint32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::pb::uint32 result() const;
  inline void set_result(::google::pb::uint32 value);
  
  // optional string err_msg = 6;
  inline bool has_err_msg() const;
  inline void clear_err_msg();
  static const int kErrMsgFieldNumber = 6;
  inline const ::std::string& err_msg() const;
  inline void set_err_msg(const ::std::string& value);
  inline void set_err_msg(const char* value);
  inline void set_err_msg(const char* value, size_t size);
  inline ::std::string* mutable_err_msg();
  inline ::std::string* release_err_msg();
  
  // @@protoc_insertion_point(class_scope:nest_msg_head)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_sub_cmd();
  inline void clear_has_sub_cmd();
  inline void set_has_set_id();
  inline void clear_has_set_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_err_msg();
  inline void clear_has_err_msg();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 msg_type_;
  ::google::pb::uint32 sub_cmd_;
  ::google::pb::uint32 set_id_;
  ::google::pb::uint32 sequence_;
  ::std::string* err_msg_;
  ::google::pb::uint32 result_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_msg_head* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_stat : public ::google::pb::Message {
 public:
  nest_proc_stat();
  virtual ~nest_proc_stat();
  
  nest_proc_stat(const nest_proc_stat& from);
  
  inline nest_proc_stat& operator=(const nest_proc_stat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_stat& default_instance();
  
  void Swap(nest_proc_stat* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_stat* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_stat& from);
  void MergeFrom(const nest_proc_stat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_type = 2;
  inline bool has_proc_type() const;
  inline void clear_proc_type();
  static const int kProcTypeFieldNumber = 2;
  inline ::google::pb::uint32 proc_type() const;
  inline void set_proc_type(::google::pb::uint32 value);
  
  // optional uint32 proc_no = 3;
  inline bool has_proc_no() const;
  inline void clear_proc_no();
  static const int kProcNoFieldNumber = 3;
  inline ::google::pb::uint32 proc_no() const;
  inline void set_proc_no(::google::pb::uint32 value);
  
  // optional uint32 proxy_proc_no = 4;
  inline bool has_proxy_proc_no() const;
  inline void clear_proxy_proc_no();
  static const int kProxyProcNoFieldNumber = 4;
  inline ::google::pb::uint32 proxy_proc_no() const;
  inline void set_proxy_proc_no(::google::pb::uint32 value);
  
  // optional uint32 proc_pid = 5;
  inline bool has_proc_pid() const;
  inline void clear_proc_pid();
  static const int kProcPidFieldNumber = 5;
  inline ::google::pb::uint32 proc_pid() const;
  inline void set_proc_pid(::google::pb::uint32 value);
  
  // optional uint32 cpu_load = 6;
  inline bool has_cpu_load() const;
  inline void clear_cpu_load();
  static const int kCpuLoadFieldNumber = 6;
  inline ::google::pb::uint32 cpu_load() const;
  inline void set_cpu_load(::google::pb::uint32 value);
  
  // optional uint32 mem_used = 7;
  inline bool has_mem_used() const;
  inline void clear_mem_used();
  static const int kMemUsedFieldNumber = 7;
  inline ::google::pb::uint32 mem_used() const;
  inline void set_mem_used(::google::pb::uint32 value);
  
  // optional uint32 net_used = 8;
  inline bool has_net_used() const;
  inline void clear_net_used();
  static const int kNetUsedFieldNumber = 8;
  inline ::google::pb::uint32 net_used() const;
  inline void set_net_used(::google::pb::uint32 value);
  
  // optional uint64 total_req = 10;
  inline bool has_total_req() const;
  inline void clear_total_req();
  static const int kTotalReqFieldNumber = 10;
  inline ::google::pb::uint64 total_req() const;
  inline void set_total_req(::google::pb::uint64 value);
  
  // optional uint64 total_rsp = 11;
  inline bool has_total_rsp() const;
  inline void clear_total_rsp();
  static const int kTotalRspFieldNumber = 11;
  inline ::google::pb::uint64 total_rsp() const;
  inline void set_total_rsp(::google::pb::uint64 value);
  
  // optional uint64 total_cost = 12;
  inline bool has_total_cost() const;
  inline void clear_total_cost();
  static const int kTotalCostFieldNumber = 12;
  inline ::google::pb::uint64 total_cost() const;
  inline void set_total_cost(::google::pb::uint64 value);
  
  // optional uint32 min_cost = 13;
  inline bool has_min_cost() const;
  inline void clear_min_cost();
  static const int kMinCostFieldNumber = 13;
  inline ::google::pb::uint32 min_cost() const;
  inline void set_min_cost(::google::pb::uint32 value);
  
  // optional uint32 max_cost = 14;
  inline bool has_max_cost() const;
  inline void clear_max_cost();
  static const int kMaxCostFieldNumber = 14;
  inline ::google::pb::uint32 max_cost() const;
  inline void set_max_cost(::google::pb::uint32 value);
  
  // optional uint64 stat_time = 15;
  inline bool has_stat_time() const;
  inline void clear_stat_time();
  static const int kStatTimeFieldNumber = 15;
  inline ::google::pb::uint64 stat_time() const;
  inline void set_stat_time(::google::pb::uint64 value);
  
  // @@protoc_insertion_point(class_scope:nest_proc_stat)
 private:
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_type();
  inline void clear_has_proc_type();
  inline void set_has_proc_no();
  inline void clear_has_proc_no();
  inline void set_has_proxy_proc_no();
  inline void clear_has_proxy_proc_no();
  inline void set_has_proc_pid();
  inline void clear_has_proc_pid();
  inline void set_has_cpu_load();
  inline void clear_has_cpu_load();
  inline void set_has_mem_used();
  inline void clear_has_mem_used();
  inline void set_has_net_used();
  inline void clear_has_net_used();
  inline void set_has_total_req();
  inline void clear_has_total_req();
  inline void set_has_total_rsp();
  inline void clear_has_total_rsp();
  inline void set_has_total_cost();
  inline void clear_has_total_cost();
  inline void set_has_min_cost();
  inline void clear_has_min_cost();
  inline void set_has_max_cost();
  inline void clear_has_max_cost();
  inline void set_has_stat_time();
  inline void clear_has_stat_time();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 service_id_;
  ::google::pb::uint32 proc_type_;
  ::google::pb::uint32 proc_no_;
  ::google::pb::uint32 proxy_proc_no_;
  ::google::pb::uint32 proc_pid_;
  ::google::pb::uint32 cpu_load_;
  ::google::pb::uint32 mem_used_;
  ::google::pb::uint32 net_used_;
  ::google::pb::uint64 total_req_;
  ::google::pb::uint64 total_rsp_;
  ::google::pb::uint64 total_cost_;
  ::google::pb::uint32 min_cost_;
  ::google::pb::uint32 max_cost_;
  ::google::pb::uint64 stat_time_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_stat* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_base : public ::google::pb::Message {
 public:
  nest_proc_base();
  virtual ~nest_proc_base();
  
  nest_proc_base(const nest_proc_base& from);
  
  inline nest_proc_base& operator=(const nest_proc_base& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_base& default_instance();
  
  void Swap(nest_proc_base* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_base* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_base& from);
  void MergeFrom(const nest_proc_base& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_type = 2;
  inline bool has_proc_type() const;
  inline void clear_proc_type();
  static const int kProcTypeFieldNumber = 2;
  inline ::google::pb::uint32 proc_type() const;
  inline void set_proc_type(::google::pb::uint32 value);
  
  // optional uint32 proc_no = 3;
  inline bool has_proc_no() const;
  inline void clear_proc_no();
  static const int kProcNoFieldNumber = 3;
  inline ::google::pb::uint32 proc_no() const;
  inline void set_proc_no(::google::pb::uint32 value);
  
  // optional uint32 proc_pid = 4;
  inline bool has_proc_pid() const;
  inline void clear_proc_pid();
  static const int kProcPidFieldNumber = 4;
  inline ::google::pb::uint32 proc_pid() const;
  inline void set_proc_pid(::google::pb::uint32 value);
  
  // optional uint32 proxy_proc_no = 5;
  inline bool has_proxy_proc_no() const;
  inline void clear_proxy_proc_no();
  static const int kProxyProcNoFieldNumber = 5;
  inline ::google::pb::uint32 proxy_proc_no() const;
  inline void set_proxy_proc_no(::google::pb::uint32 value);
  
  // optional string proxy_ip = 6;
  inline bool has_proxy_ip() const;
  inline void clear_proxy_ip();
  static const int kProxyIpFieldNumber = 6;
  inline const ::std::string& proxy_ip() const;
  inline void set_proxy_ip(const ::std::string& value);
  inline void set_proxy_ip(const char* value);
  inline void set_proxy_ip(const char* value, size_t size);
  inline ::std::string* mutable_proxy_ip();
  inline ::std::string* release_proxy_ip();
  
  // optional uint32 proxy_port = 7;
  inline bool has_proxy_port() const;
  inline void clear_proxy_port();
  static const int kProxyPortFieldNumber = 7;
  inline ::google::pb::uint32 proxy_port() const;
  inline void set_proxy_port(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_proc_base)
 private:
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_type();
  inline void clear_has_proc_type();
  inline void set_has_proc_no();
  inline void clear_has_proc_no();
  inline void set_has_proc_pid();
  inline void clear_has_proc_pid();
  inline void set_has_proxy_proc_no();
  inline void clear_has_proxy_proc_no();
  inline void set_has_proxy_ip();
  inline void clear_has_proxy_ip();
  inline void set_has_proxy_port();
  inline void clear_has_proxy_port();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 service_id_;
  ::google::pb::uint32 proc_type_;
  ::google::pb::uint32 proc_no_;
  ::google::pb::uint32 proc_pid_;
  ::std::string* proxy_ip_;
  ::google::pb::uint32 proxy_proc_no_;
  ::google::pb::uint32 proxy_port_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_base* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_node_init_req : public ::google::pb::Message {
 public:
  nest_sched_node_init_req();
  virtual ~nest_sched_node_init_req();
  
  nest_sched_node_init_req(const nest_sched_node_init_req& from);
  
  inline nest_sched_node_init_req& operator=(const nest_sched_node_init_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_node_init_req& default_instance();
  
  void Swap(nest_sched_node_init_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_node_init_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_node_init_req& from);
  void MergeFrom(const nest_sched_node_init_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional bytes node_ip = 2;
  inline bool has_node_ip() const;
  inline void clear_node_ip();
  static const int kNodeIpFieldNumber = 2;
  inline const ::std::string& node_ip() const;
  inline void set_node_ip(const ::std::string& value);
  inline void set_node_ip(const char* value);
  inline void set_node_ip(const void* value, size_t size);
  inline ::std::string* mutable_node_ip();
  inline ::std::string* release_node_ip();
  
  // repeated bytes servers = 3;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 3;
  inline const ::std::string& servers(int index) const;
  inline ::std::string* mutable_servers(int index);
  inline void set_servers(int index, const ::std::string& value);
  inline void set_servers(int index, const char* value);
  inline void set_servers(int index, const void* value, size_t size);
  inline ::std::string* add_servers();
  inline void add_servers(const ::std::string& value);
  inline void add_servers(const char* value);
  inline void add_servers(const void* value, size_t size);
  inline const ::google::pb::RepeatedPtrField< ::std::string>& servers() const;
  inline ::google::pb::RepeatedPtrField< ::std::string>* mutable_servers();
  
  // optional uint32 set_id = 4;
  inline bool has_set_id() const;
  inline void clear_set_id();
  static const int kSetIdFieldNumber = 4;
  inline ::google::pb::uint32 set_id() const;
  inline void set_set_id(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_sched_node_init_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_node_ip();
  inline void clear_has_node_ip();
  inline void set_has_set_id();
  inline void clear_has_set_id();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* node_ip_;
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 set_id_;
  ::google::pb::RepeatedPtrField< ::std::string> servers_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_node_init_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_node_init_rsp : public ::google::pb::Message {
 public:
  nest_sched_node_init_rsp();
  virtual ~nest_sched_node_init_rsp();
  
  nest_sched_node_init_rsp(const nest_sched_node_init_rsp& from);
  
  inline nest_sched_node_init_rsp& operator=(const nest_sched_node_init_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_node_init_rsp& default_instance();
  
  void Swap(nest_sched_node_init_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_node_init_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_node_init_rsp& from);
  void MergeFrom(const nest_sched_node_init_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional bytes node_ip = 2;
  inline bool has_node_ip() const;
  inline void clear_node_ip();
  static const int kNodeIpFieldNumber = 2;
  inline const ::std::string& node_ip() const;
  inline void set_node_ip(const ::std::string& value);
  inline void set_node_ip(const char* value);
  inline void set_node_ip(const void* value, size_t size);
  inline ::std::string* mutable_node_ip();
  inline ::std::string* release_node_ip();
  
  // optional bytes server = 3;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 3;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const void* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  
  // optional uint32 set_id = 4;
  inline bool has_set_id() const;
  inline void clear_set_id();
  static const int kSetIdFieldNumber = 4;
  inline ::google::pb::uint32 set_id() const;
  inline void set_set_id(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_sched_node_init_rsp)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_node_ip();
  inline void clear_has_node_ip();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_set_id();
  inline void clear_has_set_id();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* node_ip_;
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 set_id_;
  ::std::string* server_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_node_init_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_node_term_req : public ::google::pb::Message {
 public:
  nest_sched_node_term_req();
  virtual ~nest_sched_node_term_req();
  
  nest_sched_node_term_req(const nest_sched_node_term_req& from);
  
  inline nest_sched_node_term_req& operator=(const nest_sched_node_term_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_node_term_req& default_instance();
  
  void Swap(nest_sched_node_term_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_node_term_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_node_term_req& from);
  void MergeFrom(const nest_sched_node_term_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional uint32 set_id = 2;
  inline bool has_set_id() const;
  inline void clear_set_id();
  static const int kSetIdFieldNumber = 2;
  inline ::google::pb::uint32 set_id() const;
  inline void set_set_id(::google::pb::uint32 value);
  
  // optional bytes node_ip = 3;
  inline bool has_node_ip() const;
  inline void clear_node_ip();
  static const int kNodeIpFieldNumber = 3;
  inline const ::std::string& node_ip() const;
  inline void set_node_ip(const ::std::string& value);
  inline void set_node_ip(const char* value);
  inline void set_node_ip(const void* value, size_t size);
  inline ::std::string* mutable_node_ip();
  inline ::std::string* release_node_ip();
  
  // @@protoc_insertion_point(class_scope:nest_sched_node_term_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_set_id();
  inline void clear_has_set_id();
  inline void set_has_node_ip();
  inline void clear_has_node_ip();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 set_id_;
  ::std::string* node_ip_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_node_term_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_service_type : public ::google::pb::Message {
 public:
  nest_service_type();
  virtual ~nest_service_type();
  
  nest_service_type(const nest_service_type& from);
  
  inline nest_service_type& operator=(const nest_service_type& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_service_type& default_instance();
  
  void Swap(nest_service_type* other);
  
  // implements Message ----------------------------------------------
  
  nest_service_type* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_service_type& from);
  void MergeFrom(const nest_service_type& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::pb::uint32 type() const;
  inline void set_type(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_service_type)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::pb::uint32 type_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_service_type* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_load_report_req : public ::google::pb::Message {
 public:
  nest_sched_load_report_req();
  virtual ~nest_sched_load_report_req();
  
  nest_sched_load_report_req(const nest_sched_load_report_req& from);
  
  inline nest_sched_load_report_req& operator=(const nest_sched_load_report_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_load_report_req& default_instance();
  
  void Swap(nest_sched_load_report_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_load_report_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_load_report_req& from);
  void MergeFrom(const nest_sched_load_report_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes node_ip = 1;
  inline bool has_node_ip() const;
  inline void clear_node_ip();
  static const int kNodeIpFieldNumber = 1;
  inline const ::std::string& node_ip() const;
  inline void set_node_ip(const ::std::string& value);
  inline void set_node_ip(const char* value);
  inline void set_node_ip(const void* value, size_t size);
  inline ::std::string* mutable_node_ip();
  inline ::std::string* release_node_ip();
  
  // optional uint32 cpu_num = 2;
  inline bool has_cpu_num() const;
  inline void clear_cpu_num();
  static const int kCpuNumFieldNumber = 2;
  inline ::google::pb::uint32 cpu_num() const;
  inline void set_cpu_num(::google::pb::uint32 value);
  
  // optional uint32 cpu_load = 3;
  inline bool has_cpu_load() const;
  inline void clear_cpu_load();
  static const int kCpuLoadFieldNumber = 3;
  inline ::google::pb::uint32 cpu_load() const;
  inline void set_cpu_load(::google::pb::uint32 value);
  
  // optional uint32 mem_total = 4;
  inline bool has_mem_total() const;
  inline void clear_mem_total();
  static const int kMemTotalFieldNumber = 4;
  inline ::google::pb::uint32 mem_total() const;
  inline void set_mem_total(::google::pb::uint32 value);
  
  // optional uint32 mem_used = 5;
  inline bool has_mem_used() const;
  inline void clear_mem_used();
  static const int kMemUsedFieldNumber = 5;
  inline ::google::pb::uint32 mem_used() const;
  inline void set_mem_used(::google::pb::uint32 value);
  
  // optional uint32 net_total = 6;
  inline bool has_net_total() const;
  inline void clear_net_total();
  static const int kNetTotalFieldNumber = 6;
  inline ::google::pb::uint32 net_total() const;
  inline void set_net_total(::google::pb::uint32 value);
  
  // optional uint32 net_used = 7;
  inline bool has_net_used() const;
  inline void clear_net_used();
  static const int kNetUsedFieldNumber = 7;
  inline ::google::pb::uint32 net_used() const;
  inline void set_net_used(::google::pb::uint32 value);
  
  // repeated .nest_proc_stat last_stats = 30;
  inline int last_stats_size() const;
  inline void clear_last_stats();
  static const int kLastStatsFieldNumber = 30;
  inline const ::nest_proc_stat& last_stats(int index) const;
  inline ::nest_proc_stat* mutable_last_stats(int index);
  inline ::nest_proc_stat* add_last_stats();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
      last_stats() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
      mutable_last_stats();
  
  // repeated .nest_proc_stat stats = 31;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 31;
  inline const ::nest_proc_stat& stats(int index) const;
  inline ::nest_proc_stat* mutable_stats(int index);
  inline ::nest_proc_stat* add_stats();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
      stats() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
      mutable_stats();
  
  // repeated .nest_service_type srv_type = 32;
  inline int srv_type_size() const;
  inline void clear_srv_type();
  static const int kSrvTypeFieldNumber = 32;
  inline const ::nest_service_type& srv_type(int index) const;
  inline ::nest_service_type* mutable_srv_type(int index);
  inline ::nest_service_type* add_srv_type();
  inline const ::google::pb::RepeatedPtrField< ::nest_service_type >&
      srv_type() const;
  inline ::google::pb::RepeatedPtrField< ::nest_service_type >*
      mutable_srv_type();
  
  // @@protoc_insertion_point(class_scope:nest_sched_load_report_req)
 private:
  inline void set_has_node_ip();
  inline void clear_has_node_ip();
  inline void set_has_cpu_num();
  inline void clear_has_cpu_num();
  inline void set_has_cpu_load();
  inline void clear_has_cpu_load();
  inline void set_has_mem_total();
  inline void clear_has_mem_total();
  inline void set_has_mem_used();
  inline void clear_has_mem_used();
  inline void set_has_net_total();
  inline void clear_has_net_total();
  inline void set_has_net_used();
  inline void clear_has_net_used();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* node_ip_;
  ::google::pb::uint32 cpu_num_;
  ::google::pb::uint32 cpu_load_;
  ::google::pb::uint32 mem_total_;
  ::google::pb::uint32 mem_used_;
  ::google::pb::uint32 net_total_;
  ::google::pb::uint32 net_used_;
  ::google::pb::RepeatedPtrField< ::nest_proc_stat > last_stats_;
  ::google::pb::RepeatedPtrField< ::nest_proc_stat > stats_;
  ::google::pb::RepeatedPtrField< ::nest_service_type > srv_type_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_load_report_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_add_proc_req : public ::google::pb::Message {
 public:
  nest_sched_add_proc_req();
  virtual ~nest_sched_add_proc_req();
  
  nest_sched_add_proc_req(const nest_sched_add_proc_req& from);
  
  inline nest_sched_add_proc_req& operator=(const nest_sched_add_proc_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_add_proc_req& default_instance();
  
  void Swap(nest_sched_add_proc_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_add_proc_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_add_proc_req& from);
  void MergeFrom(const nest_sched_add_proc_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional uint32 service_id = 3;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 3;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_type = 4;
  inline bool has_proc_type() const;
  inline void clear_proc_type();
  static const int kProcTypeFieldNumber = 4;
  inline ::google::pb::uint32 proc_type() const;
  inline void set_proc_type(::google::pb::uint32 value);
  
  // optional string package_name = 5;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // repeated .nest_proc_base proc_conf = 6;
  inline int proc_conf_size() const;
  inline void clear_proc_conf();
  static const int kProcConfFieldNumber = 6;
  inline const ::nest_proc_base& proc_conf(int index) const;
  inline ::nest_proc_base* mutable_proc_conf(int index);
  inline ::nest_proc_base* add_proc_conf();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_conf() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_conf();
  
  // @@protoc_insertion_point(class_scope:nest_sched_add_proc_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_type();
  inline void clear_has_proc_type();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 service_id_;
  ::std::string* package_name_;
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_conf_;
  ::google::pb::uint32 proc_type_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_add_proc_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_add_proc_rsp : public ::google::pb::Message {
 public:
  nest_sched_add_proc_rsp();
  virtual ~nest_sched_add_proc_rsp();
  
  nest_sched_add_proc_rsp(const nest_sched_add_proc_rsp& from);
  
  inline nest_sched_add_proc_rsp& operator=(const nest_sched_add_proc_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_add_proc_rsp& default_instance();
  
  void Swap(nest_sched_add_proc_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_add_proc_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_add_proc_rsp& from);
  void MergeFrom(const nest_sched_add_proc_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional uint32 service_id = 3;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 3;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_type = 4;
  inline bool has_proc_type() const;
  inline void clear_proc_type();
  static const int kProcTypeFieldNumber = 4;
  inline ::google::pb::uint32 proc_type() const;
  inline void set_proc_type(::google::pb::uint32 value);
  
  // optional string package_name = 5;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // repeated .nest_proc_base proc_info = 6;
  inline int proc_info_size() const;
  inline void clear_proc_info();
  static const int kProcInfoFieldNumber = 6;
  inline const ::nest_proc_base& proc_info(int index) const;
  inline ::nest_proc_base* mutable_proc_info(int index);
  inline ::nest_proc_base* add_proc_info();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_info() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_info();
  
  // @@protoc_insertion_point(class_scope:nest_sched_add_proc_rsp)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_type();
  inline void clear_has_proc_type();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 service_id_;
  ::std::string* package_name_;
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_info_;
  ::google::pb::uint32 proc_type_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_add_proc_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_del_proc_req : public ::google::pb::Message {
 public:
  nest_sched_del_proc_req();
  virtual ~nest_sched_del_proc_req();
  
  nest_sched_del_proc_req(const nest_sched_del_proc_req& from);
  
  inline nest_sched_del_proc_req& operator=(const nest_sched_del_proc_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_del_proc_req& default_instance();
  
  void Swap(nest_sched_del_proc_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_del_proc_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_del_proc_req& from);
  void MergeFrom(const nest_sched_del_proc_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // repeated .nest_proc_base proc_list = 4;
  inline int proc_list_size() const;
  inline void clear_proc_list();
  static const int kProcListFieldNumber = 4;
  inline const ::nest_proc_base& proc_list(int index) const;
  inline ::nest_proc_base* mutable_proc_list(int index);
  inline ::nest_proc_base* add_proc_list();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_list() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_list();
  
  // @@protoc_insertion_point(class_scope:nest_sched_del_proc_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_list_;
  ::google::pb::uint32 task_id_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_del_proc_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_del_proc_rsp : public ::google::pb::Message {
 public:
  nest_sched_del_proc_rsp();
  virtual ~nest_sched_del_proc_rsp();
  
  nest_sched_del_proc_rsp(const nest_sched_del_proc_rsp& from);
  
  inline nest_sched_del_proc_rsp& operator=(const nest_sched_del_proc_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_del_proc_rsp& default_instance();
  
  void Swap(nest_sched_del_proc_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_del_proc_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_del_proc_rsp& from);
  void MergeFrom(const nest_sched_del_proc_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // repeated .nest_proc_base proc_list = 4;
  inline int proc_list_size() const;
  inline void clear_proc_list();
  static const int kProcListFieldNumber = 4;
  inline const ::nest_proc_base& proc_list(int index) const;
  inline ::nest_proc_base* mutable_proc_list(int index);
  inline ::nest_proc_base* add_proc_list();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_list() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_list();
  
  // @@protoc_insertion_point(class_scope:nest_sched_del_proc_rsp)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_list_;
  ::google::pb::uint32 task_id_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_del_proc_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_restart_proc_req : public ::google::pb::Message {
 public:
  nest_sched_restart_proc_req();
  virtual ~nest_sched_restart_proc_req();
  
  nest_sched_restart_proc_req(const nest_sched_restart_proc_req& from);
  
  inline nest_sched_restart_proc_req& operator=(const nest_sched_restart_proc_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_restart_proc_req& default_instance();
  
  void Swap(nest_sched_restart_proc_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_restart_proc_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_restart_proc_req& from);
  void MergeFrom(const nest_sched_restart_proc_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string package_name = 5;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // repeated .nest_proc_base proc_conf = 6;
  inline int proc_conf_size() const;
  inline void clear_proc_conf();
  static const int kProcConfFieldNumber = 6;
  inline const ::nest_proc_base& proc_conf(int index) const;
  inline ::nest_proc_base* mutable_proc_conf(int index);
  inline ::nest_proc_base* add_proc_conf();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_conf() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_conf();
  
  // optional uint32 proc_all = 7;
  inline bool has_proc_all() const;
  inline void clear_proc_all();
  static const int kProcAllFieldNumber = 7;
  inline ::google::pb::uint32 proc_all() const;
  inline void set_proc_all(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_sched_restart_proc_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  inline void set_has_proc_all();
  inline void clear_has_proc_all();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* package_name_;
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 proc_all_;
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_conf_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_restart_proc_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_restart_proc_rsp : public ::google::pb::Message {
 public:
  nest_sched_restart_proc_rsp();
  virtual ~nest_sched_restart_proc_rsp();
  
  nest_sched_restart_proc_rsp(const nest_sched_restart_proc_rsp& from);
  
  inline nest_sched_restart_proc_rsp& operator=(const nest_sched_restart_proc_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_restart_proc_rsp& default_instance();
  
  void Swap(nest_sched_restart_proc_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_restart_proc_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_restart_proc_rsp& from);
  void MergeFrom(const nest_sched_restart_proc_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string package_name = 5;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // repeated .nest_proc_base proc_info = 6;
  inline int proc_info_size() const;
  inline void clear_proc_info();
  static const int kProcInfoFieldNumber = 6;
  inline const ::nest_proc_base& proc_info(int index) const;
  inline ::nest_proc_base* mutable_proc_info(int index);
  inline ::nest_proc_base* add_proc_info();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
      proc_info() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
      mutable_proc_info();
  
  // @@protoc_insertion_point(class_scope:nest_sched_restart_proc_rsp)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* package_name_;
  ::google::pb::RepeatedPtrField< ::nest_proc_base > proc_info_;
  ::google::pb::uint32 task_id_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_restart_proc_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_service_info_req : public ::google::pb::Message {
 public:
  nest_sched_service_info_req();
  virtual ~nest_sched_service_info_req();
  
  nest_sched_service_info_req(const nest_sched_service_info_req& from);
  
  inline nest_sched_service_info_req& operator=(const nest_sched_service_info_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_service_info_req& default_instance();
  
  void Swap(nest_sched_service_info_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_service_info_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_service_info_req& from);
  void MergeFrom(const nest_sched_service_info_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional string service_name = 2;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // @@protoc_insertion_point(class_scope:nest_sched_service_info_req)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::google::pb::uint32 task_id_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_service_info_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_sched_service_info_rsp : public ::google::pb::Message {
 public:
  nest_sched_service_info_rsp();
  virtual ~nest_sched_service_info_rsp();
  
  nest_sched_service_info_rsp(const nest_sched_service_info_rsp& from);
  
  inline nest_sched_service_info_rsp& operator=(const nest_sched_service_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_sched_service_info_rsp& default_instance();
  
  void Swap(nest_sched_service_info_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_sched_service_info_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_sched_service_info_rsp& from);
  void MergeFrom(const nest_sched_service_info_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::pb::uint32 task_id() const;
  inline void set_task_id(::google::pb::uint32 value);
  
  // optional uint32 proc_cnt = 2;
  inline bool has_proc_cnt() const;
  inline void clear_proc_cnt();
  static const int kProcCntFieldNumber = 2;
  inline ::google::pb::uint32 proc_cnt() const;
  inline void set_proc_cnt(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_sched_service_info_rsp)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_proc_cnt();
  inline void clear_has_proc_cnt();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 task_id_;
  ::google::pb::uint32 proc_cnt_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_sched_service_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_heartbeat_req : public ::google::pb::Message {
 public:
  nest_proc_heartbeat_req();
  virtual ~nest_proc_heartbeat_req();
  
  nest_proc_heartbeat_req(const nest_proc_heartbeat_req& from);
  
  inline nest_proc_heartbeat_req& operator=(const nest_proc_heartbeat_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_heartbeat_req& default_instance();
  
  void Swap(nest_proc_heartbeat_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_heartbeat_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_heartbeat_req& from);
  void MergeFrom(const nest_proc_heartbeat_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .nest_proc_base proc = 1;
  inline bool has_proc() const;
  inline void clear_proc();
  static const int kProcFieldNumber = 1;
  inline const ::nest_proc_base& proc() const;
  inline ::nest_proc_base* mutable_proc();
  inline ::nest_proc_base* release_proc();
  
  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::pb::uint32 state() const;
  inline void set_state(::google::pb::uint32 value);
  
  // optional string service_name = 3;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string package_name = 4;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 4;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // @@protoc_insertion_point(class_scope:nest_proc_heartbeat_req)
 private:
  inline void set_has_proc();
  inline void clear_has_proc();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::nest_proc_base* proc_;
  ::std::string* service_name_;
  ::std::string* package_name_;
  ::google::pb::uint32 state_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_heartbeat_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_init_req : public ::google::pb::Message {
 public:
  nest_proc_init_req();
  virtual ~nest_proc_init_req();
  
  nest_proc_init_req(const nest_proc_init_req& from);
  
  inline nest_proc_init_req& operator=(const nest_proc_init_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_init_req& default_instance();
  
  void Swap(nest_proc_init_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_init_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_init_req& from);
  void MergeFrom(const nest_proc_init_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .nest_proc_base proc = 1;
  inline bool has_proc() const;
  inline void clear_proc();
  static const int kProcFieldNumber = 1;
  inline const ::nest_proc_base& proc() const;
  inline ::nest_proc_base* mutable_proc();
  inline ::nest_proc_base* release_proc();
  
  // optional string service_name = 3;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string package_name = 4;
  inline bool has_package_name() const;
  inline void clear_package_name();
  static const int kPackageNameFieldNumber = 4;
  inline const ::std::string& package_name() const;
  inline void set_package_name(const ::std::string& value);
  inline void set_package_name(const char* value);
  inline void set_package_name(const char* value, size_t size);
  inline ::std::string* mutable_package_name();
  inline ::std::string* release_package_name();
  
  // @@protoc_insertion_point(class_scope:nest_proc_init_req)
 private:
  inline void set_has_proc();
  inline void clear_has_proc();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_package_name();
  inline void clear_has_package_name();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::nest_proc_base* proc_;
  ::std::string* service_name_;
  ::std::string* package_name_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_init_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_init_rsp : public ::google::pb::Message {
 public:
  nest_proc_init_rsp();
  virtual ~nest_proc_init_rsp();
  
  nest_proc_init_rsp(const nest_proc_init_rsp& from);
  
  inline nest_proc_init_rsp& operator=(const nest_proc_init_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_init_rsp& default_instance();
  
  void Swap(nest_proc_init_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_init_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_init_rsp& from);
  void MergeFrom(const nest_proc_init_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .nest_proc_base proc = 1;
  inline bool has_proc() const;
  inline void clear_proc();
  static const int kProcFieldNumber = 1;
  inline const ::nest_proc_base& proc() const;
  inline ::nest_proc_base* mutable_proc();
  inline ::nest_proc_base* release_proc();
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::pb::uint32 type() const;
  inline void set_type(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_proc_init_rsp)
 private:
  inline void set_has_proc();
  inline void clear_has_proc();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::nest_proc_base* proc_;
  ::google::pb::uint32 type_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_init_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_suspend_req : public ::google::pb::Message {
 public:
  nest_proc_suspend_req();
  virtual ~nest_proc_suspend_req();
  
  nest_proc_suspend_req(const nest_proc_suspend_req& from);
  
  inline nest_proc_suspend_req& operator=(const nest_proc_suspend_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_suspend_req& default_instance();
  
  void Swap(nest_proc_suspend_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_suspend_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_suspend_req& from);
  void MergeFrom(const nest_proc_suspend_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_no = 2;
  inline bool has_proc_no() const;
  inline void clear_proc_no();
  static const int kProcNoFieldNumber = 2;
  inline ::google::pb::uint32 proc_no() const;
  inline void set_proc_no(::google::pb::uint32 value);
  
  // optional uint32 proc_pid = 3;
  inline bool has_proc_pid() const;
  inline void clear_proc_pid();
  static const int kProcPidFieldNumber = 3;
  inline ::google::pb::uint32 proc_pid() const;
  inline void set_proc_pid(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_proc_suspend_req)
 private:
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_no();
  inline void clear_has_proc_no();
  inline void set_has_proc_pid();
  inline void clear_has_proc_pid();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 service_id_;
  ::google::pb::uint32 proc_no_;
  ::google::pb::uint32 proc_pid_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_suspend_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_stop_req : public ::google::pb::Message {
 public:
  nest_proc_stop_req();
  virtual ~nest_proc_stop_req();
  
  nest_proc_stop_req(const nest_proc_stop_req& from);
  
  inline nest_proc_stop_req& operator=(const nest_proc_stop_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_stop_req& default_instance();
  
  void Swap(nest_proc_stop_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_stop_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_stop_req& from);
  void MergeFrom(const nest_proc_stop_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::pb::uint32 service_id() const;
  inline void set_service_id(::google::pb::uint32 value);
  
  // optional uint32 proc_no = 2;
  inline bool has_proc_no() const;
  inline void clear_proc_no();
  static const int kProcNoFieldNumber = 2;
  inline ::google::pb::uint32 proc_no() const;
  inline void set_proc_no(::google::pb::uint32 value);
  
  // optional uint32 proc_pid = 3;
  inline bool has_proc_pid() const;
  inline void clear_proc_pid();
  static const int kProcPidFieldNumber = 3;
  inline ::google::pb::uint32 proc_pid() const;
  inline void set_proc_pid(::google::pb::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nest_proc_stop_req)
 private:
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_proc_no();
  inline void clear_has_proc_no();
  inline void set_has_proc_pid();
  inline void clear_has_proc_pid();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 service_id_;
  ::google::pb::uint32 proc_no_;
  ::google::pb::uint32 proc_pid_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_stop_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_proc_stat_report_req : public ::google::pb::Message {
 public:
  nest_proc_stat_report_req();
  virtual ~nest_proc_stat_report_req();
  
  nest_proc_stat_report_req(const nest_proc_stat_report_req& from);
  
  inline nest_proc_stat_report_req& operator=(const nest_proc_stat_report_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_proc_stat_report_req& default_instance();
  
  void Swap(nest_proc_stat_report_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_proc_stat_report_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_proc_stat_report_req& from);
  void MergeFrom(const nest_proc_stat_report_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .nest_proc_stat stat = 1;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 1;
  inline const ::nest_proc_stat& stat() const;
  inline ::nest_proc_stat* mutable_stat();
  inline ::nest_proc_stat* release_stat();
  
  // @@protoc_insertion_point(class_scope:nest_proc_stat_report_req)
 private:
  inline void set_has_stat();
  inline void clear_has_stat();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::nest_proc_stat* stat_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_proc_stat_report_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_agent_sysload_req : public ::google::pb::Message {
 public:
  nest_agent_sysload_req();
  virtual ~nest_agent_sysload_req();
  
  nest_agent_sysload_req(const nest_agent_sysload_req& from);
  
  inline nest_agent_sysload_req& operator=(const nest_agent_sysload_req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_agent_sysload_req& default_instance();
  
  void Swap(nest_agent_sysload_req* other);
  
  // implements Message ----------------------------------------------
  
  nest_agent_sysload_req* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_agent_sysload_req& from);
  void MergeFrom(const nest_agent_sysload_req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cpu_num = 1;
  inline bool has_cpu_num() const;
  inline void clear_cpu_num();
  static const int kCpuNumFieldNumber = 1;
  inline ::google::pb::uint32 cpu_num() const;
  inline void set_cpu_num(::google::pb::uint32 value);
  
  // optional uint32 cpu_total = 2;
  inline bool has_cpu_total() const;
  inline void clear_cpu_total();
  static const int kCpuTotalFieldNumber = 2;
  inline ::google::pb::uint32 cpu_total() const;
  inline void set_cpu_total(::google::pb::uint32 value);
  
  // optional uint32 cpu_load = 3;
  inline bool has_cpu_load() const;
  inline void clear_cpu_load();
  static const int kCpuLoadFieldNumber = 3;
  inline ::google::pb::uint32 cpu_load() const;
  inline void set_cpu_load(::google::pb::uint32 value);
  
  // optional uint32 mem_total = 4;
  inline bool has_mem_total() const;
  inline void clear_mem_total();
  static const int kMemTotalFieldNumber = 4;
  inline ::google::pb::uint32 mem_total() const;
  inline void set_mem_total(::google::pb::uint32 value);
  
  // optional uint32 mem_used = 5;
  inline bool has_mem_used() const;
  inline void clear_mem_used();
  static const int kMemUsedFieldNumber = 5;
  inline ::google::pb::uint32 mem_used() const;
  inline void set_mem_used(::google::pb::uint32 value);
  
  // optional uint32 net_total = 6;
  inline bool has_net_total() const;
  inline void clear_net_total();
  static const int kNetTotalFieldNumber = 6;
  inline ::google::pb::uint32 net_total() const;
  inline void set_net_total(::google::pb::uint32 value);
  
  // optional uint32 net_used = 7;
  inline bool has_net_used() const;
  inline void clear_net_used();
  static const int kNetUsedFieldNumber = 7;
  inline ::google::pb::uint32 net_used() const;
  inline void set_net_used(::google::pb::uint32 value);
  
  // repeated .nest_proc_stat stats = 31;
  inline int stats_size() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 31;
  inline const ::nest_proc_stat& stats(int index) const;
  inline ::nest_proc_stat* mutable_stats(int index);
  inline ::nest_proc_stat* add_stats();
  inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
      stats() const;
  inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
      mutable_stats();
  
  // @@protoc_insertion_point(class_scope:nest_agent_sysload_req)
 private:
  inline void set_has_cpu_num();
  inline void clear_has_cpu_num();
  inline void set_has_cpu_total();
  inline void clear_has_cpu_total();
  inline void set_has_cpu_load();
  inline void clear_has_cpu_load();
  inline void set_has_mem_total();
  inline void clear_has_mem_total();
  inline void set_has_mem_used();
  inline void clear_has_mem_used();
  inline void set_has_net_total();
  inline void clear_has_net_total();
  inline void set_has_net_used();
  inline void clear_has_net_used();
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::uint32 cpu_num_;
  ::google::pb::uint32 cpu_total_;
  ::google::pb::uint32 cpu_load_;
  ::google::pb::uint32 mem_total_;
  ::google::pb::uint32 mem_used_;
  ::google::pb::uint32 net_total_;
  ::google::pb::RepeatedPtrField< ::nest_proc_stat > stats_;
  ::google::pb::uint32 net_used_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_agent_sysload_req* default_instance_;
};
// -------------------------------------------------------------------

class nest_agent_sysload_rsp : public ::google::pb::Message {
 public:
  nest_agent_sysload_rsp();
  virtual ~nest_agent_sysload_rsp();
  
  nest_agent_sysload_rsp(const nest_agent_sysload_rsp& from);
  
  inline nest_agent_sysload_rsp& operator=(const nest_agent_sysload_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::pb::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::pb::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::pb::Descriptor* descriptor();
  static const nest_agent_sysload_rsp& default_instance();
  
  void Swap(nest_agent_sysload_rsp* other);
  
  // implements Message ----------------------------------------------
  
  nest_agent_sysload_rsp* New() const;
  void CopyFrom(const ::google::pb::Message& from);
  void MergeFrom(const ::google::pb::Message& from);
  void CopyFrom(const nest_agent_sysload_rsp& from);
  void MergeFrom(const nest_agent_sysload_rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::pb::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::pb::io::CodedOutputStream* output) const;
  ::google::pb::uint8* SerializeWithCachedSizesToArray(::google::pb::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::pb::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 pids = 1;
  inline int pids_size() const;
  inline void clear_pids();
  static const int kPidsFieldNumber = 1;
  inline ::google::pb::uint32 pids(int index) const;
  inline void set_pids(int index, ::google::pb::uint32 value);
  inline void add_pids(::google::pb::uint32 value);
  inline const ::google::pb::RepeatedField< ::google::pb::uint32 >&
      pids() const;
  inline ::google::pb::RepeatedField< ::google::pb::uint32 >*
      mutable_pids();
  
  // @@protoc_insertion_point(class_scope:nest_agent_sysload_rsp)
 private:
  
  ::google::pb::UnknownFieldSet _unknown_fields_;
  
  ::google::pb::RepeatedField< ::google::pb::uint32 > pids_;
  
  mutable int _cached_size_;
  ::google::pb::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_nest_2eproto();
  friend void protobuf_AssignDesc_nest_2eproto();
  friend void protobuf_ShutdownFile_nest_2eproto();
  
  void InitAsDefaultInstance();
  static nest_agent_sysload_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// nest_msg_head

// optional uint32 msg_type = 1;
inline bool nest_msg_head::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_msg_head::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_msg_head::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_msg_head::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::pb::uint32 nest_msg_head::msg_type() const {
  return msg_type_;
}
inline void nest_msg_head::set_msg_type(::google::pb::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
}

// optional uint32 sub_cmd = 2;
inline bool nest_msg_head::has_sub_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_msg_head::set_has_sub_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_msg_head::clear_has_sub_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_msg_head::clear_sub_cmd() {
  sub_cmd_ = 0u;
  clear_has_sub_cmd();
}
inline ::google::pb::uint32 nest_msg_head::sub_cmd() const {
  return sub_cmd_;
}
inline void nest_msg_head::set_sub_cmd(::google::pb::uint32 value) {
  set_has_sub_cmd();
  sub_cmd_ = value;
}

// optional uint32 set_id = 3;
inline bool nest_msg_head::has_set_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_msg_head::set_has_set_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_msg_head::clear_has_set_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_msg_head::clear_set_id() {
  set_id_ = 0u;
  clear_has_set_id();
}
inline ::google::pb::uint32 nest_msg_head::set_id() const {
  return set_id_;
}
inline void nest_msg_head::set_set_id(::google::pb::uint32 value) {
  set_has_set_id();
  set_id_ = value;
}

// optional uint32 sequence = 4;
inline bool nest_msg_head::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_msg_head::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_msg_head::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_msg_head::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::pb::uint32 nest_msg_head::sequence() const {
  return sequence_;
}
inline void nest_msg_head::set_sequence(::google::pb::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional uint32 result = 5;
inline bool nest_msg_head::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_msg_head::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_msg_head::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_msg_head::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::pb::uint32 nest_msg_head::result() const {
  return result_;
}
inline void nest_msg_head::set_result(::google::pb::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional string err_msg = 6;
inline bool nest_msg_head::has_err_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void nest_msg_head::set_has_err_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void nest_msg_head::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void nest_msg_head::clear_err_msg() {
  if (err_msg_ != &::google::pb::internal::kEmptyString) {
    err_msg_->clear();
  }
  clear_has_err_msg();
}
inline const ::std::string& nest_msg_head::err_msg() const {
  return *err_msg_;
}
inline void nest_msg_head::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  if (err_msg_ == &::google::pb::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void nest_msg_head::set_err_msg(const char* value) {
  set_has_err_msg();
  if (err_msg_ == &::google::pb::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void nest_msg_head::set_err_msg(const char* value, size_t size) {
  set_has_err_msg();
  if (err_msg_ == &::google::pb::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_msg_head::mutable_err_msg() {
  set_has_err_msg();
  if (err_msg_ == &::google::pb::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  return err_msg_;
}
inline ::std::string* nest_msg_head::release_err_msg() {
  clear_has_err_msg();
  if (err_msg_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_msg_;
    err_msg_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// nest_proc_stat

// optional uint32 service_id = 1;
inline bool nest_proc_stat::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_stat::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_stat::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_stat::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_proc_stat::service_id() const {
  return service_id_;
}
inline void nest_proc_stat::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_type = 2;
inline bool nest_proc_stat::has_proc_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_stat::set_has_proc_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_stat::clear_has_proc_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_stat::clear_proc_type() {
  proc_type_ = 0u;
  clear_has_proc_type();
}
inline ::google::pb::uint32 nest_proc_stat::proc_type() const {
  return proc_type_;
}
inline void nest_proc_stat::set_proc_type(::google::pb::uint32 value) {
  set_has_proc_type();
  proc_type_ = value;
}

// optional uint32 proc_no = 3;
inline bool nest_proc_stat::has_proc_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_stat::set_has_proc_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_stat::clear_has_proc_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_stat::clear_proc_no() {
  proc_no_ = 0u;
  clear_has_proc_no();
}
inline ::google::pb::uint32 nest_proc_stat::proc_no() const {
  return proc_no_;
}
inline void nest_proc_stat::set_proc_no(::google::pb::uint32 value) {
  set_has_proc_no();
  proc_no_ = value;
}

// optional uint32 proxy_proc_no = 4;
inline bool nest_proc_stat::has_proxy_proc_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_proc_stat::set_has_proxy_proc_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_proc_stat::clear_has_proxy_proc_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_proc_stat::clear_proxy_proc_no() {
  proxy_proc_no_ = 0u;
  clear_has_proxy_proc_no();
}
inline ::google::pb::uint32 nest_proc_stat::proxy_proc_no() const {
  return proxy_proc_no_;
}
inline void nest_proc_stat::set_proxy_proc_no(::google::pb::uint32 value) {
  set_has_proxy_proc_no();
  proxy_proc_no_ = value;
}

// optional uint32 proc_pid = 5;
inline bool nest_proc_stat::has_proc_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_proc_stat::set_has_proc_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_proc_stat::clear_has_proc_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_proc_stat::clear_proc_pid() {
  proc_pid_ = 0u;
  clear_has_proc_pid();
}
inline ::google::pb::uint32 nest_proc_stat::proc_pid() const {
  return proc_pid_;
}
inline void nest_proc_stat::set_proc_pid(::google::pb::uint32 value) {
  set_has_proc_pid();
  proc_pid_ = value;
}

// optional uint32 cpu_load = 6;
inline bool nest_proc_stat::has_cpu_load() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void nest_proc_stat::set_has_cpu_load() {
  _has_bits_[0] |= 0x00000020u;
}
inline void nest_proc_stat::clear_has_cpu_load() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void nest_proc_stat::clear_cpu_load() {
  cpu_load_ = 0u;
  clear_has_cpu_load();
}
inline ::google::pb::uint32 nest_proc_stat::cpu_load() const {
  return cpu_load_;
}
inline void nest_proc_stat::set_cpu_load(::google::pb::uint32 value) {
  set_has_cpu_load();
  cpu_load_ = value;
}

// optional uint32 mem_used = 7;
inline bool nest_proc_stat::has_mem_used() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void nest_proc_stat::set_has_mem_used() {
  _has_bits_[0] |= 0x00000040u;
}
inline void nest_proc_stat::clear_has_mem_used() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void nest_proc_stat::clear_mem_used() {
  mem_used_ = 0u;
  clear_has_mem_used();
}
inline ::google::pb::uint32 nest_proc_stat::mem_used() const {
  return mem_used_;
}
inline void nest_proc_stat::set_mem_used(::google::pb::uint32 value) {
  set_has_mem_used();
  mem_used_ = value;
}

// optional uint32 net_used = 8;
inline bool nest_proc_stat::has_net_used() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void nest_proc_stat::set_has_net_used() {
  _has_bits_[0] |= 0x00000080u;
}
inline void nest_proc_stat::clear_has_net_used() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void nest_proc_stat::clear_net_used() {
  net_used_ = 0u;
  clear_has_net_used();
}
inline ::google::pb::uint32 nest_proc_stat::net_used() const {
  return net_used_;
}
inline void nest_proc_stat::set_net_used(::google::pb::uint32 value) {
  set_has_net_used();
  net_used_ = value;
}

// optional uint64 total_req = 10;
inline bool nest_proc_stat::has_total_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void nest_proc_stat::set_has_total_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void nest_proc_stat::clear_has_total_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void nest_proc_stat::clear_total_req() {
  total_req_ = GOOGLE_ULONGLONG(0);
  clear_has_total_req();
}
inline ::google::pb::uint64 nest_proc_stat::total_req() const {
  return total_req_;
}
inline void nest_proc_stat::set_total_req(::google::pb::uint64 value) {
  set_has_total_req();
  total_req_ = value;
}

// optional uint64 total_rsp = 11;
inline bool nest_proc_stat::has_total_rsp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void nest_proc_stat::set_has_total_rsp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void nest_proc_stat::clear_has_total_rsp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void nest_proc_stat::clear_total_rsp() {
  total_rsp_ = GOOGLE_ULONGLONG(0);
  clear_has_total_rsp();
}
inline ::google::pb::uint64 nest_proc_stat::total_rsp() const {
  return total_rsp_;
}
inline void nest_proc_stat::set_total_rsp(::google::pb::uint64 value) {
  set_has_total_rsp();
  total_rsp_ = value;
}

// optional uint64 total_cost = 12;
inline bool nest_proc_stat::has_total_cost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void nest_proc_stat::set_has_total_cost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void nest_proc_stat::clear_has_total_cost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void nest_proc_stat::clear_total_cost() {
  total_cost_ = GOOGLE_ULONGLONG(0);
  clear_has_total_cost();
}
inline ::google::pb::uint64 nest_proc_stat::total_cost() const {
  return total_cost_;
}
inline void nest_proc_stat::set_total_cost(::google::pb::uint64 value) {
  set_has_total_cost();
  total_cost_ = value;
}

// optional uint32 min_cost = 13;
inline bool nest_proc_stat::has_min_cost() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void nest_proc_stat::set_has_min_cost() {
  _has_bits_[0] |= 0x00000800u;
}
inline void nest_proc_stat::clear_has_min_cost() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void nest_proc_stat::clear_min_cost() {
  min_cost_ = 0u;
  clear_has_min_cost();
}
inline ::google::pb::uint32 nest_proc_stat::min_cost() const {
  return min_cost_;
}
inline void nest_proc_stat::set_min_cost(::google::pb::uint32 value) {
  set_has_min_cost();
  min_cost_ = value;
}

// optional uint32 max_cost = 14;
inline bool nest_proc_stat::has_max_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void nest_proc_stat::set_has_max_cost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void nest_proc_stat::clear_has_max_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void nest_proc_stat::clear_max_cost() {
  max_cost_ = 0u;
  clear_has_max_cost();
}
inline ::google::pb::uint32 nest_proc_stat::max_cost() const {
  return max_cost_;
}
inline void nest_proc_stat::set_max_cost(::google::pb::uint32 value) {
  set_has_max_cost();
  max_cost_ = value;
}

// optional uint64 stat_time = 15;
inline bool nest_proc_stat::has_stat_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void nest_proc_stat::set_has_stat_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void nest_proc_stat::clear_has_stat_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void nest_proc_stat::clear_stat_time() {
  stat_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stat_time();
}
inline ::google::pb::uint64 nest_proc_stat::stat_time() const {
  return stat_time_;
}
inline void nest_proc_stat::set_stat_time(::google::pb::uint64 value) {
  set_has_stat_time();
  stat_time_ = value;
}

// -------------------------------------------------------------------

// nest_proc_base

// optional uint32 service_id = 1;
inline bool nest_proc_base::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_base::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_base::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_base::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_proc_base::service_id() const {
  return service_id_;
}
inline void nest_proc_base::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_type = 2;
inline bool nest_proc_base::has_proc_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_base::set_has_proc_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_base::clear_has_proc_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_base::clear_proc_type() {
  proc_type_ = 0u;
  clear_has_proc_type();
}
inline ::google::pb::uint32 nest_proc_base::proc_type() const {
  return proc_type_;
}
inline void nest_proc_base::set_proc_type(::google::pb::uint32 value) {
  set_has_proc_type();
  proc_type_ = value;
}

// optional uint32 proc_no = 3;
inline bool nest_proc_base::has_proc_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_base::set_has_proc_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_base::clear_has_proc_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_base::clear_proc_no() {
  proc_no_ = 0u;
  clear_has_proc_no();
}
inline ::google::pb::uint32 nest_proc_base::proc_no() const {
  return proc_no_;
}
inline void nest_proc_base::set_proc_no(::google::pb::uint32 value) {
  set_has_proc_no();
  proc_no_ = value;
}

// optional uint32 proc_pid = 4;
inline bool nest_proc_base::has_proc_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_proc_base::set_has_proc_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_proc_base::clear_has_proc_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_proc_base::clear_proc_pid() {
  proc_pid_ = 0u;
  clear_has_proc_pid();
}
inline ::google::pb::uint32 nest_proc_base::proc_pid() const {
  return proc_pid_;
}
inline void nest_proc_base::set_proc_pid(::google::pb::uint32 value) {
  set_has_proc_pid();
  proc_pid_ = value;
}

// optional uint32 proxy_proc_no = 5;
inline bool nest_proc_base::has_proxy_proc_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_proc_base::set_has_proxy_proc_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_proc_base::clear_has_proxy_proc_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_proc_base::clear_proxy_proc_no() {
  proxy_proc_no_ = 0u;
  clear_has_proxy_proc_no();
}
inline ::google::pb::uint32 nest_proc_base::proxy_proc_no() const {
  return proxy_proc_no_;
}
inline void nest_proc_base::set_proxy_proc_no(::google::pb::uint32 value) {
  set_has_proxy_proc_no();
  proxy_proc_no_ = value;
}

// optional string proxy_ip = 6;
inline bool nest_proc_base::has_proxy_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void nest_proc_base::set_has_proxy_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void nest_proc_base::clear_has_proxy_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void nest_proc_base::clear_proxy_ip() {
  if (proxy_ip_ != &::google::pb::internal::kEmptyString) {
    proxy_ip_->clear();
  }
  clear_has_proxy_ip();
}
inline const ::std::string& nest_proc_base::proxy_ip() const {
  return *proxy_ip_;
}
inline void nest_proc_base::set_proxy_ip(const ::std::string& value) {
  set_has_proxy_ip();
  if (proxy_ip_ == &::google::pb::internal::kEmptyString) {
    proxy_ip_ = new ::std::string;
  }
  proxy_ip_->assign(value);
}
inline void nest_proc_base::set_proxy_ip(const char* value) {
  set_has_proxy_ip();
  if (proxy_ip_ == &::google::pb::internal::kEmptyString) {
    proxy_ip_ = new ::std::string;
  }
  proxy_ip_->assign(value);
}
inline void nest_proc_base::set_proxy_ip(const char* value, size_t size) {
  set_has_proxy_ip();
  if (proxy_ip_ == &::google::pb::internal::kEmptyString) {
    proxy_ip_ = new ::std::string;
  }
  proxy_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_proc_base::mutable_proxy_ip() {
  set_has_proxy_ip();
  if (proxy_ip_ == &::google::pb::internal::kEmptyString) {
    proxy_ip_ = new ::std::string;
  }
  return proxy_ip_;
}
inline ::std::string* nest_proc_base::release_proxy_ip() {
  clear_has_proxy_ip();
  if (proxy_ip_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proxy_ip_;
    proxy_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 proxy_port = 7;
inline bool nest_proc_base::has_proxy_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void nest_proc_base::set_has_proxy_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void nest_proc_base::clear_has_proxy_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void nest_proc_base::clear_proxy_port() {
  proxy_port_ = 0u;
  clear_has_proxy_port();
}
inline ::google::pb::uint32 nest_proc_base::proxy_port() const {
  return proxy_port_;
}
inline void nest_proc_base::set_proxy_port(::google::pb::uint32 value) {
  set_has_proxy_port();
  proxy_port_ = value;
}

// -------------------------------------------------------------------

// nest_sched_node_init_req

// optional uint32 task_id = 1;
inline bool nest_sched_node_init_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_node_init_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_node_init_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_node_init_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_node_init_req::task_id() const {
  return task_id_;
}
inline void nest_sched_node_init_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional bytes node_ip = 2;
inline bool nest_sched_node_init_req::has_node_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_node_init_req::set_has_node_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_node_init_req::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_node_init_req::clear_node_ip() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    node_ip_->clear();
  }
  clear_has_node_ip();
}
inline const ::std::string& nest_sched_node_init_req::node_ip() const {
  return *node_ip_;
}
inline void nest_sched_node_init_req::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_init_req::set_node_ip(const char* value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_init_req::set_node_ip(const void* value, size_t size) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_node_init_req::mutable_node_ip() {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  return node_ip_;
}
inline ::std::string* nest_sched_node_init_req::release_node_ip() {
  clear_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_ip_;
    node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// repeated bytes servers = 3;
inline int nest_sched_node_init_req::servers_size() const {
  return servers_.size();
}
inline void nest_sched_node_init_req::clear_servers() {
  servers_.Clear();
}
inline const ::std::string& nest_sched_node_init_req::servers(int index) const {
  return servers_.Get(index);
}
inline ::std::string* nest_sched_node_init_req::mutable_servers(int index) {
  return servers_.Mutable(index);
}
inline void nest_sched_node_init_req::set_servers(int index, const ::std::string& value) {
  servers_.Mutable(index)->assign(value);
}
inline void nest_sched_node_init_req::set_servers(int index, const char* value) {
  servers_.Mutable(index)->assign(value);
}
inline void nest_sched_node_init_req::set_servers(int index, const void* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_node_init_req::add_servers() {
  return servers_.Add();
}
inline void nest_sched_node_init_req::add_servers(const ::std::string& value) {
  servers_.Add()->assign(value);
}
inline void nest_sched_node_init_req::add_servers(const char* value) {
  servers_.Add()->assign(value);
}
inline void nest_sched_node_init_req::add_servers(const void* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::pb::RepeatedPtrField< ::std::string>&
nest_sched_node_init_req::servers() const {
  return servers_;
}
inline ::google::pb::RepeatedPtrField< ::std::string>*
nest_sched_node_init_req::mutable_servers() {
  return &servers_;
}

// optional uint32 set_id = 4;
inline bool nest_sched_node_init_req::has_set_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_sched_node_init_req::set_has_set_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_sched_node_init_req::clear_has_set_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_sched_node_init_req::clear_set_id() {
  set_id_ = 0u;
  clear_has_set_id();
}
inline ::google::pb::uint32 nest_sched_node_init_req::set_id() const {
  return set_id_;
}
inline void nest_sched_node_init_req::set_set_id(::google::pb::uint32 value) {
  set_has_set_id();
  set_id_ = value;
}

// -------------------------------------------------------------------

// nest_sched_node_init_rsp

// optional uint32 task_id = 1;
inline bool nest_sched_node_init_rsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_node_init_rsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_node_init_rsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_node_init_rsp::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_node_init_rsp::task_id() const {
  return task_id_;
}
inline void nest_sched_node_init_rsp::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional bytes node_ip = 2;
inline bool nest_sched_node_init_rsp::has_node_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_node_init_rsp::set_has_node_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_node_init_rsp::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_node_init_rsp::clear_node_ip() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    node_ip_->clear();
  }
  clear_has_node_ip();
}
inline const ::std::string& nest_sched_node_init_rsp::node_ip() const {
  return *node_ip_;
}
inline void nest_sched_node_init_rsp::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_init_rsp::set_node_ip(const char* value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_init_rsp::set_node_ip(const void* value, size_t size) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_node_init_rsp::mutable_node_ip() {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  return node_ip_;
}
inline ::std::string* nest_sched_node_init_rsp::release_node_ip() {
  clear_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_ip_;
    node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional bytes server = 3;
inline bool nest_sched_node_init_rsp::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_node_init_rsp::set_has_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_node_init_rsp::clear_has_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_node_init_rsp::clear_server() {
  if (server_ != &::google::pb::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& nest_sched_node_init_rsp::server() const {
  return *server_;
}
inline void nest_sched_node_init_rsp::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::pb::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void nest_sched_node_init_rsp::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::pb::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void nest_sched_node_init_rsp::set_server(const void* value, size_t size) {
  set_has_server();
  if (server_ == &::google::pb::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_node_init_rsp::mutable_server() {
  set_has_server();
  if (server_ == &::google::pb::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* nest_sched_node_init_rsp::release_server() {
  clear_has_server();
  if (server_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 set_id = 4;
inline bool nest_sched_node_init_rsp::has_set_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_sched_node_init_rsp::set_has_set_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_sched_node_init_rsp::clear_has_set_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_sched_node_init_rsp::clear_set_id() {
  set_id_ = 0u;
  clear_has_set_id();
}
inline ::google::pb::uint32 nest_sched_node_init_rsp::set_id() const {
  return set_id_;
}
inline void nest_sched_node_init_rsp::set_set_id(::google::pb::uint32 value) {
  set_has_set_id();
  set_id_ = value;
}

// -------------------------------------------------------------------

// nest_sched_node_term_req

// optional uint32 task_id = 1;
inline bool nest_sched_node_term_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_node_term_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_node_term_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_node_term_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_node_term_req::task_id() const {
  return task_id_;
}
inline void nest_sched_node_term_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 set_id = 2;
inline bool nest_sched_node_term_req::has_set_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_node_term_req::set_has_set_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_node_term_req::clear_has_set_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_node_term_req::clear_set_id() {
  set_id_ = 0u;
  clear_has_set_id();
}
inline ::google::pb::uint32 nest_sched_node_term_req::set_id() const {
  return set_id_;
}
inline void nest_sched_node_term_req::set_set_id(::google::pb::uint32 value) {
  set_has_set_id();
  set_id_ = value;
}

// optional bytes node_ip = 3;
inline bool nest_sched_node_term_req::has_node_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_node_term_req::set_has_node_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_node_term_req::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_node_term_req::clear_node_ip() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    node_ip_->clear();
  }
  clear_has_node_ip();
}
inline const ::std::string& nest_sched_node_term_req::node_ip() const {
  return *node_ip_;
}
inline void nest_sched_node_term_req::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_term_req::set_node_ip(const char* value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_node_term_req::set_node_ip(const void* value, size_t size) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_node_term_req::mutable_node_ip() {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  return node_ip_;
}
inline ::std::string* nest_sched_node_term_req::release_node_ip() {
  clear_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_ip_;
    node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// nest_service_type

// optional bytes name = 1;
inline bool nest_service_type::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_service_type::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_service_type::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_service_type::clear_name() {
  if (name_ != &::google::pb::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& nest_service_type::name() const {
  return *name_;
}
inline void nest_service_type::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::pb::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void nest_service_type::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::pb::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void nest_service_type::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::pb::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_service_type::mutable_name() {
  set_has_name();
  if (name_ == &::google::pb::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* nest_service_type::release_name() {
  clear_has_name();
  if (name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 type = 2;
inline bool nest_service_type::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_service_type::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_service_type::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_service_type::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::pb::uint32 nest_service_type::type() const {
  return type_;
}
inline void nest_service_type::set_type(::google::pb::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// nest_sched_load_report_req

// optional bytes node_ip = 1;
inline bool nest_sched_load_report_req::has_node_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_load_report_req::set_has_node_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_load_report_req::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_load_report_req::clear_node_ip() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    node_ip_->clear();
  }
  clear_has_node_ip();
}
inline const ::std::string& nest_sched_load_report_req::node_ip() const {
  return *node_ip_;
}
inline void nest_sched_load_report_req::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_load_report_req::set_node_ip(const char* value) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void nest_sched_load_report_req::set_node_ip(const void* value, size_t size) {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_load_report_req::mutable_node_ip() {
  set_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  return node_ip_;
}
inline ::std::string* nest_sched_load_report_req::release_node_ip() {
  clear_has_node_ip();
  if (node_ip_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_ip_;
    node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 cpu_num = 2;
inline bool nest_sched_load_report_req::has_cpu_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_load_report_req::set_has_cpu_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_load_report_req::clear_has_cpu_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_load_report_req::clear_cpu_num() {
  cpu_num_ = 0u;
  clear_has_cpu_num();
}
inline ::google::pb::uint32 nest_sched_load_report_req::cpu_num() const {
  return cpu_num_;
}
inline void nest_sched_load_report_req::set_cpu_num(::google::pb::uint32 value) {
  set_has_cpu_num();
  cpu_num_ = value;
}

// optional uint32 cpu_load = 3;
inline bool nest_sched_load_report_req::has_cpu_load() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_load_report_req::set_has_cpu_load() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_load_report_req::clear_has_cpu_load() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_load_report_req::clear_cpu_load() {
  cpu_load_ = 0u;
  clear_has_cpu_load();
}
inline ::google::pb::uint32 nest_sched_load_report_req::cpu_load() const {
  return cpu_load_;
}
inline void nest_sched_load_report_req::set_cpu_load(::google::pb::uint32 value) {
  set_has_cpu_load();
  cpu_load_ = value;
}

// optional uint32 mem_total = 4;
inline bool nest_sched_load_report_req::has_mem_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_sched_load_report_req::set_has_mem_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_sched_load_report_req::clear_has_mem_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_sched_load_report_req::clear_mem_total() {
  mem_total_ = 0u;
  clear_has_mem_total();
}
inline ::google::pb::uint32 nest_sched_load_report_req::mem_total() const {
  return mem_total_;
}
inline void nest_sched_load_report_req::set_mem_total(::google::pb::uint32 value) {
  set_has_mem_total();
  mem_total_ = value;
}

// optional uint32 mem_used = 5;
inline bool nest_sched_load_report_req::has_mem_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_sched_load_report_req::set_has_mem_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_sched_load_report_req::clear_has_mem_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_sched_load_report_req::clear_mem_used() {
  mem_used_ = 0u;
  clear_has_mem_used();
}
inline ::google::pb::uint32 nest_sched_load_report_req::mem_used() const {
  return mem_used_;
}
inline void nest_sched_load_report_req::set_mem_used(::google::pb::uint32 value) {
  set_has_mem_used();
  mem_used_ = value;
}

// optional uint32 net_total = 6;
inline bool nest_sched_load_report_req::has_net_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void nest_sched_load_report_req::set_has_net_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void nest_sched_load_report_req::clear_has_net_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void nest_sched_load_report_req::clear_net_total() {
  net_total_ = 0u;
  clear_has_net_total();
}
inline ::google::pb::uint32 nest_sched_load_report_req::net_total() const {
  return net_total_;
}
inline void nest_sched_load_report_req::set_net_total(::google::pb::uint32 value) {
  set_has_net_total();
  net_total_ = value;
}

// optional uint32 net_used = 7;
inline bool nest_sched_load_report_req::has_net_used() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void nest_sched_load_report_req::set_has_net_used() {
  _has_bits_[0] |= 0x00000040u;
}
inline void nest_sched_load_report_req::clear_has_net_used() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void nest_sched_load_report_req::clear_net_used() {
  net_used_ = 0u;
  clear_has_net_used();
}
inline ::google::pb::uint32 nest_sched_load_report_req::net_used() const {
  return net_used_;
}
inline void nest_sched_load_report_req::set_net_used(::google::pb::uint32 value) {
  set_has_net_used();
  net_used_ = value;
}

// repeated .nest_proc_stat last_stats = 30;
inline int nest_sched_load_report_req::last_stats_size() const {
  return last_stats_.size();
}
inline void nest_sched_load_report_req::clear_last_stats() {
  last_stats_.Clear();
}
inline const ::nest_proc_stat& nest_sched_load_report_req::last_stats(int index) const {
  return last_stats_.Get(index);
}
inline ::nest_proc_stat* nest_sched_load_report_req::mutable_last_stats(int index) {
  return last_stats_.Mutable(index);
}
inline ::nest_proc_stat* nest_sched_load_report_req::add_last_stats() {
  return last_stats_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
nest_sched_load_report_req::last_stats() const {
  return last_stats_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
nest_sched_load_report_req::mutable_last_stats() {
  return &last_stats_;
}

// repeated .nest_proc_stat stats = 31;
inline int nest_sched_load_report_req::stats_size() const {
  return stats_.size();
}
inline void nest_sched_load_report_req::clear_stats() {
  stats_.Clear();
}
inline const ::nest_proc_stat& nest_sched_load_report_req::stats(int index) const {
  return stats_.Get(index);
}
inline ::nest_proc_stat* nest_sched_load_report_req::mutable_stats(int index) {
  return stats_.Mutable(index);
}
inline ::nest_proc_stat* nest_sched_load_report_req::add_stats() {
  return stats_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
nest_sched_load_report_req::stats() const {
  return stats_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
nest_sched_load_report_req::mutable_stats() {
  return &stats_;
}

// repeated .nest_service_type srv_type = 32;
inline int nest_sched_load_report_req::srv_type_size() const {
  return srv_type_.size();
}
inline void nest_sched_load_report_req::clear_srv_type() {
  srv_type_.Clear();
}
inline const ::nest_service_type& nest_sched_load_report_req::srv_type(int index) const {
  return srv_type_.Get(index);
}
inline ::nest_service_type* nest_sched_load_report_req::mutable_srv_type(int index) {
  return srv_type_.Mutable(index);
}
inline ::nest_service_type* nest_sched_load_report_req::add_srv_type() {
  return srv_type_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_service_type >&
nest_sched_load_report_req::srv_type() const {
  return srv_type_;
}
inline ::google::pb::RepeatedPtrField< ::nest_service_type >*
nest_sched_load_report_req::mutable_srv_type() {
  return &srv_type_;
}

// -------------------------------------------------------------------

// nest_sched_add_proc_req

// optional uint32 task_id = 1;
inline bool nest_sched_add_proc_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_add_proc_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_add_proc_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_add_proc_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_add_proc_req::task_id() const {
  return task_id_;
}
inline void nest_sched_add_proc_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string service_name = 2;
inline bool nest_sched_add_proc_req::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_add_proc_req::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_add_proc_req::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_add_proc_req::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_sched_add_proc_req::service_name() const {
  return *service_name_;
}
inline void nest_sched_add_proc_req::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_add_proc_req::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_add_proc_req::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_add_proc_req::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_sched_add_proc_req::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 service_id = 3;
inline bool nest_sched_add_proc_req::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_add_proc_req::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_add_proc_req::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_add_proc_req::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_sched_add_proc_req::service_id() const {
  return service_id_;
}
inline void nest_sched_add_proc_req::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_type = 4;
inline bool nest_sched_add_proc_req::has_proc_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_sched_add_proc_req::set_has_proc_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_sched_add_proc_req::clear_has_proc_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_sched_add_proc_req::clear_proc_type() {
  proc_type_ = 0u;
  clear_has_proc_type();
}
inline ::google::pb::uint32 nest_sched_add_proc_req::proc_type() const {
  return proc_type_;
}
inline void nest_sched_add_proc_req::set_proc_type(::google::pb::uint32 value) {
  set_has_proc_type();
  proc_type_ = value;
}

// optional string package_name = 5;
inline bool nest_sched_add_proc_req::has_package_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_sched_add_proc_req::set_has_package_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_sched_add_proc_req::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_sched_add_proc_req::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_sched_add_proc_req::package_name() const {
  return *package_name_;
}
inline void nest_sched_add_proc_req::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_add_proc_req::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_add_proc_req::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_add_proc_req::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_sched_add_proc_req::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// repeated .nest_proc_base proc_conf = 6;
inline int nest_sched_add_proc_req::proc_conf_size() const {
  return proc_conf_.size();
}
inline void nest_sched_add_proc_req::clear_proc_conf() {
  proc_conf_.Clear();
}
inline const ::nest_proc_base& nest_sched_add_proc_req::proc_conf(int index) const {
  return proc_conf_.Get(index);
}
inline ::nest_proc_base* nest_sched_add_proc_req::mutable_proc_conf(int index) {
  return proc_conf_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_add_proc_req::add_proc_conf() {
  return proc_conf_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_add_proc_req::proc_conf() const {
  return proc_conf_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_add_proc_req::mutable_proc_conf() {
  return &proc_conf_;
}

// -------------------------------------------------------------------

// nest_sched_add_proc_rsp

// optional uint32 task_id = 1;
inline bool nest_sched_add_proc_rsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_add_proc_rsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_add_proc_rsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_add_proc_rsp::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_add_proc_rsp::task_id() const {
  return task_id_;
}
inline void nest_sched_add_proc_rsp::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string service_name = 2;
inline bool nest_sched_add_proc_rsp::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_add_proc_rsp::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_add_proc_rsp::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_add_proc_rsp::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_sched_add_proc_rsp::service_name() const {
  return *service_name_;
}
inline void nest_sched_add_proc_rsp::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_add_proc_rsp::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_add_proc_rsp::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_add_proc_rsp::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_sched_add_proc_rsp::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 service_id = 3;
inline bool nest_sched_add_proc_rsp::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_add_proc_rsp::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_add_proc_rsp::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_add_proc_rsp::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_sched_add_proc_rsp::service_id() const {
  return service_id_;
}
inline void nest_sched_add_proc_rsp::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_type = 4;
inline bool nest_sched_add_proc_rsp::has_proc_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_sched_add_proc_rsp::set_has_proc_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_sched_add_proc_rsp::clear_has_proc_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_sched_add_proc_rsp::clear_proc_type() {
  proc_type_ = 0u;
  clear_has_proc_type();
}
inline ::google::pb::uint32 nest_sched_add_proc_rsp::proc_type() const {
  return proc_type_;
}
inline void nest_sched_add_proc_rsp::set_proc_type(::google::pb::uint32 value) {
  set_has_proc_type();
  proc_type_ = value;
}

// optional string package_name = 5;
inline bool nest_sched_add_proc_rsp::has_package_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_sched_add_proc_rsp::set_has_package_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_sched_add_proc_rsp::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_sched_add_proc_rsp::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_sched_add_proc_rsp::package_name() const {
  return *package_name_;
}
inline void nest_sched_add_proc_rsp::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_add_proc_rsp::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_add_proc_rsp::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_add_proc_rsp::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_sched_add_proc_rsp::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// repeated .nest_proc_base proc_info = 6;
inline int nest_sched_add_proc_rsp::proc_info_size() const {
  return proc_info_.size();
}
inline void nest_sched_add_proc_rsp::clear_proc_info() {
  proc_info_.Clear();
}
inline const ::nest_proc_base& nest_sched_add_proc_rsp::proc_info(int index) const {
  return proc_info_.Get(index);
}
inline ::nest_proc_base* nest_sched_add_proc_rsp::mutable_proc_info(int index) {
  return proc_info_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_add_proc_rsp::add_proc_info() {
  return proc_info_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_add_proc_rsp::proc_info() const {
  return proc_info_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_add_proc_rsp::mutable_proc_info() {
  return &proc_info_;
}

// -------------------------------------------------------------------

// nest_sched_del_proc_req

// optional uint32 task_id = 1;
inline bool nest_sched_del_proc_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_del_proc_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_del_proc_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_del_proc_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_del_proc_req::task_id() const {
  return task_id_;
}
inline void nest_sched_del_proc_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// repeated .nest_proc_base proc_list = 4;
inline int nest_sched_del_proc_req::proc_list_size() const {
  return proc_list_.size();
}
inline void nest_sched_del_proc_req::clear_proc_list() {
  proc_list_.Clear();
}
inline const ::nest_proc_base& nest_sched_del_proc_req::proc_list(int index) const {
  return proc_list_.Get(index);
}
inline ::nest_proc_base* nest_sched_del_proc_req::mutable_proc_list(int index) {
  return proc_list_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_del_proc_req::add_proc_list() {
  return proc_list_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_del_proc_req::proc_list() const {
  return proc_list_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_del_proc_req::mutable_proc_list() {
  return &proc_list_;
}

// -------------------------------------------------------------------

// nest_sched_del_proc_rsp

// optional uint32 task_id = 1;
inline bool nest_sched_del_proc_rsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_del_proc_rsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_del_proc_rsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_del_proc_rsp::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_del_proc_rsp::task_id() const {
  return task_id_;
}
inline void nest_sched_del_proc_rsp::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// repeated .nest_proc_base proc_list = 4;
inline int nest_sched_del_proc_rsp::proc_list_size() const {
  return proc_list_.size();
}
inline void nest_sched_del_proc_rsp::clear_proc_list() {
  proc_list_.Clear();
}
inline const ::nest_proc_base& nest_sched_del_proc_rsp::proc_list(int index) const {
  return proc_list_.Get(index);
}
inline ::nest_proc_base* nest_sched_del_proc_rsp::mutable_proc_list(int index) {
  return proc_list_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_del_proc_rsp::add_proc_list() {
  return proc_list_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_del_proc_rsp::proc_list() const {
  return proc_list_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_del_proc_rsp::mutable_proc_list() {
  return &proc_list_;
}

// -------------------------------------------------------------------

// nest_sched_restart_proc_req

// optional uint32 task_id = 1;
inline bool nest_sched_restart_proc_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_restart_proc_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_restart_proc_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_restart_proc_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_restart_proc_req::task_id() const {
  return task_id_;
}
inline void nest_sched_restart_proc_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string service_name = 2;
inline bool nest_sched_restart_proc_req::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_restart_proc_req::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_restart_proc_req::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_restart_proc_req::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_sched_restart_proc_req::service_name() const {
  return *service_name_;
}
inline void nest_sched_restart_proc_req::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_restart_proc_req::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_restart_proc_req::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_restart_proc_req::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_sched_restart_proc_req::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional string package_name = 5;
inline bool nest_sched_restart_proc_req::has_package_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_restart_proc_req::set_has_package_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_restart_proc_req::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_restart_proc_req::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_sched_restart_proc_req::package_name() const {
  return *package_name_;
}
inline void nest_sched_restart_proc_req::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_restart_proc_req::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_restart_proc_req::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_restart_proc_req::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_sched_restart_proc_req::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// repeated .nest_proc_base proc_conf = 6;
inline int nest_sched_restart_proc_req::proc_conf_size() const {
  return proc_conf_.size();
}
inline void nest_sched_restart_proc_req::clear_proc_conf() {
  proc_conf_.Clear();
}
inline const ::nest_proc_base& nest_sched_restart_proc_req::proc_conf(int index) const {
  return proc_conf_.Get(index);
}
inline ::nest_proc_base* nest_sched_restart_proc_req::mutable_proc_conf(int index) {
  return proc_conf_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_restart_proc_req::add_proc_conf() {
  return proc_conf_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_restart_proc_req::proc_conf() const {
  return proc_conf_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_restart_proc_req::mutable_proc_conf() {
  return &proc_conf_;
}

// optional uint32 proc_all = 7;
inline bool nest_sched_restart_proc_req::has_proc_all() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_sched_restart_proc_req::set_has_proc_all() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_sched_restart_proc_req::clear_has_proc_all() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_sched_restart_proc_req::clear_proc_all() {
  proc_all_ = 0u;
  clear_has_proc_all();
}
inline ::google::pb::uint32 nest_sched_restart_proc_req::proc_all() const {
  return proc_all_;
}
inline void nest_sched_restart_proc_req::set_proc_all(::google::pb::uint32 value) {
  set_has_proc_all();
  proc_all_ = value;
}

// -------------------------------------------------------------------

// nest_sched_restart_proc_rsp

// optional uint32 task_id = 1;
inline bool nest_sched_restart_proc_rsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_restart_proc_rsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_restart_proc_rsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_restart_proc_rsp::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_restart_proc_rsp::task_id() const {
  return task_id_;
}
inline void nest_sched_restart_proc_rsp::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string service_name = 2;
inline bool nest_sched_restart_proc_rsp::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_restart_proc_rsp::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_restart_proc_rsp::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_restart_proc_rsp::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_sched_restart_proc_rsp::service_name() const {
  return *service_name_;
}
inline void nest_sched_restart_proc_rsp::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_restart_proc_rsp::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_restart_proc_rsp::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_restart_proc_rsp::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_sched_restart_proc_rsp::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional string package_name = 5;
inline bool nest_sched_restart_proc_rsp::has_package_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_sched_restart_proc_rsp::set_has_package_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_sched_restart_proc_rsp::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_sched_restart_proc_rsp::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_sched_restart_proc_rsp::package_name() const {
  return *package_name_;
}
inline void nest_sched_restart_proc_rsp::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_restart_proc_rsp::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_sched_restart_proc_rsp::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_restart_proc_rsp::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_sched_restart_proc_rsp::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// repeated .nest_proc_base proc_info = 6;
inline int nest_sched_restart_proc_rsp::proc_info_size() const {
  return proc_info_.size();
}
inline void nest_sched_restart_proc_rsp::clear_proc_info() {
  proc_info_.Clear();
}
inline const ::nest_proc_base& nest_sched_restart_proc_rsp::proc_info(int index) const {
  return proc_info_.Get(index);
}
inline ::nest_proc_base* nest_sched_restart_proc_rsp::mutable_proc_info(int index) {
  return proc_info_.Mutable(index);
}
inline ::nest_proc_base* nest_sched_restart_proc_rsp::add_proc_info() {
  return proc_info_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_base >&
nest_sched_restart_proc_rsp::proc_info() const {
  return proc_info_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_base >*
nest_sched_restart_proc_rsp::mutable_proc_info() {
  return &proc_info_;
}

// -------------------------------------------------------------------

// nest_sched_service_info_req

// optional uint32 task_id = 1;
inline bool nest_sched_service_info_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_service_info_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_service_info_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_service_info_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_service_info_req::task_id() const {
  return task_id_;
}
inline void nest_sched_service_info_req::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string service_name = 2;
inline bool nest_sched_service_info_req::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_service_info_req::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_service_info_req::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_service_info_req::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_sched_service_info_req::service_name() const {
  return *service_name_;
}
inline void nest_sched_service_info_req::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_service_info_req::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_sched_service_info_req::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_sched_service_info_req::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_sched_service_info_req::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// nest_sched_service_info_rsp

// optional uint32 task_id = 1;
inline bool nest_sched_service_info_rsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_sched_service_info_rsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_sched_service_info_rsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_sched_service_info_rsp::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::pb::uint32 nest_sched_service_info_rsp::task_id() const {
  return task_id_;
}
inline void nest_sched_service_info_rsp::set_task_id(::google::pb::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 proc_cnt = 2;
inline bool nest_sched_service_info_rsp::has_proc_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_sched_service_info_rsp::set_has_proc_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_sched_service_info_rsp::clear_has_proc_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_sched_service_info_rsp::clear_proc_cnt() {
  proc_cnt_ = 0u;
  clear_has_proc_cnt();
}
inline ::google::pb::uint32 nest_sched_service_info_rsp::proc_cnt() const {
  return proc_cnt_;
}
inline void nest_sched_service_info_rsp::set_proc_cnt(::google::pb::uint32 value) {
  set_has_proc_cnt();
  proc_cnt_ = value;
}

// -------------------------------------------------------------------

// nest_proc_heartbeat_req

// optional .nest_proc_base proc = 1;
inline bool nest_proc_heartbeat_req::has_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_heartbeat_req::set_has_proc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_heartbeat_req::clear_has_proc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_heartbeat_req::clear_proc() {
  if (proc_ != NULL) proc_->::nest_proc_base::Clear();
  clear_has_proc();
}
inline const ::nest_proc_base& nest_proc_heartbeat_req::proc() const {
  return proc_ != NULL ? *proc_ : *default_instance_->proc_;
}
inline ::nest_proc_base* nest_proc_heartbeat_req::mutable_proc() {
  set_has_proc();
  if (proc_ == NULL) proc_ = new ::nest_proc_base;
  return proc_;
}
inline ::nest_proc_base* nest_proc_heartbeat_req::release_proc() {
  clear_has_proc();
  ::nest_proc_base* temp = proc_;
  proc_ = NULL;
  return temp;
}

// optional uint32 state = 2;
inline bool nest_proc_heartbeat_req::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_heartbeat_req::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_heartbeat_req::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_heartbeat_req::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::pb::uint32 nest_proc_heartbeat_req::state() const {
  return state_;
}
inline void nest_proc_heartbeat_req::set_state(::google::pb::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional string service_name = 3;
inline bool nest_proc_heartbeat_req::has_service_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_heartbeat_req::set_has_service_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_heartbeat_req::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_heartbeat_req::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_proc_heartbeat_req::service_name() const {
  return *service_name_;
}
inline void nest_proc_heartbeat_req::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_proc_heartbeat_req::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_proc_heartbeat_req::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_proc_heartbeat_req::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_proc_heartbeat_req::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional string package_name = 4;
inline bool nest_proc_heartbeat_req::has_package_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_proc_heartbeat_req::set_has_package_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_proc_heartbeat_req::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_proc_heartbeat_req::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_proc_heartbeat_req::package_name() const {
  return *package_name_;
}
inline void nest_proc_heartbeat_req::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_proc_heartbeat_req::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_proc_heartbeat_req::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_proc_heartbeat_req::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_proc_heartbeat_req::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// nest_proc_init_req

// optional .nest_proc_base proc = 1;
inline bool nest_proc_init_req::has_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_init_req::set_has_proc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_init_req::clear_has_proc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_init_req::clear_proc() {
  if (proc_ != NULL) proc_->::nest_proc_base::Clear();
  clear_has_proc();
}
inline const ::nest_proc_base& nest_proc_init_req::proc() const {
  return proc_ != NULL ? *proc_ : *default_instance_->proc_;
}
inline ::nest_proc_base* nest_proc_init_req::mutable_proc() {
  set_has_proc();
  if (proc_ == NULL) proc_ = new ::nest_proc_base;
  return proc_;
}
inline ::nest_proc_base* nest_proc_init_req::release_proc() {
  clear_has_proc();
  ::nest_proc_base* temp = proc_;
  proc_ = NULL;
  return temp;
}

// optional string service_name = 3;
inline bool nest_proc_init_req::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_init_req::set_has_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_init_req::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_init_req::clear_service_name() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& nest_proc_init_req::service_name() const {
  return *service_name_;
}
inline void nest_proc_init_req::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_proc_init_req::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void nest_proc_init_req::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_proc_init_req::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* nest_proc_init_req::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// optional string package_name = 4;
inline bool nest_proc_init_req::has_package_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_init_req::set_has_package_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_init_req::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_init_req::clear_package_name() {
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    package_name_->clear();
  }
  clear_has_package_name();
}
inline const ::std::string& nest_proc_init_req::package_name() const {
  return *package_name_;
}
inline void nest_proc_init_req::set_package_name(const ::std::string& value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_proc_init_req::set_package_name(const char* value) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(value);
}
inline void nest_proc_init_req::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  package_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nest_proc_init_req::mutable_package_name() {
  set_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    package_name_ = new ::std::string;
  }
  return package_name_;
}
inline ::std::string* nest_proc_init_req::release_package_name() {
  clear_has_package_name();
  if (package_name_ == &::google::pb::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_name_;
    package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// nest_proc_init_rsp

// optional .nest_proc_base proc = 1;
inline bool nest_proc_init_rsp::has_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_init_rsp::set_has_proc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_init_rsp::clear_has_proc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_init_rsp::clear_proc() {
  if (proc_ != NULL) proc_->::nest_proc_base::Clear();
  clear_has_proc();
}
inline const ::nest_proc_base& nest_proc_init_rsp::proc() const {
  return proc_ != NULL ? *proc_ : *default_instance_->proc_;
}
inline ::nest_proc_base* nest_proc_init_rsp::mutable_proc() {
  set_has_proc();
  if (proc_ == NULL) proc_ = new ::nest_proc_base;
  return proc_;
}
inline ::nest_proc_base* nest_proc_init_rsp::release_proc() {
  clear_has_proc();
  ::nest_proc_base* temp = proc_;
  proc_ = NULL;
  return temp;
}

// optional uint32 type = 2;
inline bool nest_proc_init_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_init_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_init_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_init_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::pb::uint32 nest_proc_init_rsp::type() const {
  return type_;
}
inline void nest_proc_init_rsp::set_type(::google::pb::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// nest_proc_suspend_req

// optional uint32 service_id = 1;
inline bool nest_proc_suspend_req::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_suspend_req::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_suspend_req::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_suspend_req::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_proc_suspend_req::service_id() const {
  return service_id_;
}
inline void nest_proc_suspend_req::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_no = 2;
inline bool nest_proc_suspend_req::has_proc_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_suspend_req::set_has_proc_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_suspend_req::clear_has_proc_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_suspend_req::clear_proc_no() {
  proc_no_ = 0u;
  clear_has_proc_no();
}
inline ::google::pb::uint32 nest_proc_suspend_req::proc_no() const {
  return proc_no_;
}
inline void nest_proc_suspend_req::set_proc_no(::google::pb::uint32 value) {
  set_has_proc_no();
  proc_no_ = value;
}

// optional uint32 proc_pid = 3;
inline bool nest_proc_suspend_req::has_proc_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_suspend_req::set_has_proc_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_suspend_req::clear_has_proc_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_suspend_req::clear_proc_pid() {
  proc_pid_ = 0u;
  clear_has_proc_pid();
}
inline ::google::pb::uint32 nest_proc_suspend_req::proc_pid() const {
  return proc_pid_;
}
inline void nest_proc_suspend_req::set_proc_pid(::google::pb::uint32 value) {
  set_has_proc_pid();
  proc_pid_ = value;
}

// -------------------------------------------------------------------

// nest_proc_stop_req

// optional uint32 service_id = 1;
inline bool nest_proc_stop_req::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_stop_req::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_stop_req::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_stop_req::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::pb::uint32 nest_proc_stop_req::service_id() const {
  return service_id_;
}
inline void nest_proc_stop_req::set_service_id(::google::pb::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// optional uint32 proc_no = 2;
inline bool nest_proc_stop_req::has_proc_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_proc_stop_req::set_has_proc_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_proc_stop_req::clear_has_proc_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_proc_stop_req::clear_proc_no() {
  proc_no_ = 0u;
  clear_has_proc_no();
}
inline ::google::pb::uint32 nest_proc_stop_req::proc_no() const {
  return proc_no_;
}
inline void nest_proc_stop_req::set_proc_no(::google::pb::uint32 value) {
  set_has_proc_no();
  proc_no_ = value;
}

// optional uint32 proc_pid = 3;
inline bool nest_proc_stop_req::has_proc_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_proc_stop_req::set_has_proc_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_proc_stop_req::clear_has_proc_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_proc_stop_req::clear_proc_pid() {
  proc_pid_ = 0u;
  clear_has_proc_pid();
}
inline ::google::pb::uint32 nest_proc_stop_req::proc_pid() const {
  return proc_pid_;
}
inline void nest_proc_stop_req::set_proc_pid(::google::pb::uint32 value) {
  set_has_proc_pid();
  proc_pid_ = value;
}

// -------------------------------------------------------------------

// nest_proc_stat_report_req

// optional .nest_proc_stat stat = 1;
inline bool nest_proc_stat_report_req::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_proc_stat_report_req::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_proc_stat_report_req::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_proc_stat_report_req::clear_stat() {
  if (stat_ != NULL) stat_->::nest_proc_stat::Clear();
  clear_has_stat();
}
inline const ::nest_proc_stat& nest_proc_stat_report_req::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::nest_proc_stat* nest_proc_stat_report_req::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::nest_proc_stat;
  return stat_;
}
inline ::nest_proc_stat* nest_proc_stat_report_req::release_stat() {
  clear_has_stat();
  ::nest_proc_stat* temp = stat_;
  stat_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// nest_agent_sysload_req

// optional uint32 cpu_num = 1;
inline bool nest_agent_sysload_req::has_cpu_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nest_agent_sysload_req::set_has_cpu_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nest_agent_sysload_req::clear_has_cpu_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nest_agent_sysload_req::clear_cpu_num() {
  cpu_num_ = 0u;
  clear_has_cpu_num();
}
inline ::google::pb::uint32 nest_agent_sysload_req::cpu_num() const {
  return cpu_num_;
}
inline void nest_agent_sysload_req::set_cpu_num(::google::pb::uint32 value) {
  set_has_cpu_num();
  cpu_num_ = value;
}

// optional uint32 cpu_total = 2;
inline bool nest_agent_sysload_req::has_cpu_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nest_agent_sysload_req::set_has_cpu_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nest_agent_sysload_req::clear_has_cpu_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nest_agent_sysload_req::clear_cpu_total() {
  cpu_total_ = 0u;
  clear_has_cpu_total();
}
inline ::google::pb::uint32 nest_agent_sysload_req::cpu_total() const {
  return cpu_total_;
}
inline void nest_agent_sysload_req::set_cpu_total(::google::pb::uint32 value) {
  set_has_cpu_total();
  cpu_total_ = value;
}

// optional uint32 cpu_load = 3;
inline bool nest_agent_sysload_req::has_cpu_load() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nest_agent_sysload_req::set_has_cpu_load() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nest_agent_sysload_req::clear_has_cpu_load() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nest_agent_sysload_req::clear_cpu_load() {
  cpu_load_ = 0u;
  clear_has_cpu_load();
}
inline ::google::pb::uint32 nest_agent_sysload_req::cpu_load() const {
  return cpu_load_;
}
inline void nest_agent_sysload_req::set_cpu_load(::google::pb::uint32 value) {
  set_has_cpu_load();
  cpu_load_ = value;
}

// optional uint32 mem_total = 4;
inline bool nest_agent_sysload_req::has_mem_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nest_agent_sysload_req::set_has_mem_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void nest_agent_sysload_req::clear_has_mem_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void nest_agent_sysload_req::clear_mem_total() {
  mem_total_ = 0u;
  clear_has_mem_total();
}
inline ::google::pb::uint32 nest_agent_sysload_req::mem_total() const {
  return mem_total_;
}
inline void nest_agent_sysload_req::set_mem_total(::google::pb::uint32 value) {
  set_has_mem_total();
  mem_total_ = value;
}

// optional uint32 mem_used = 5;
inline bool nest_agent_sysload_req::has_mem_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nest_agent_sysload_req::set_has_mem_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void nest_agent_sysload_req::clear_has_mem_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void nest_agent_sysload_req::clear_mem_used() {
  mem_used_ = 0u;
  clear_has_mem_used();
}
inline ::google::pb::uint32 nest_agent_sysload_req::mem_used() const {
  return mem_used_;
}
inline void nest_agent_sysload_req::set_mem_used(::google::pb::uint32 value) {
  set_has_mem_used();
  mem_used_ = value;
}

// optional uint32 net_total = 6;
inline bool nest_agent_sysload_req::has_net_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void nest_agent_sysload_req::set_has_net_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void nest_agent_sysload_req::clear_has_net_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void nest_agent_sysload_req::clear_net_total() {
  net_total_ = 0u;
  clear_has_net_total();
}
inline ::google::pb::uint32 nest_agent_sysload_req::net_total() const {
  return net_total_;
}
inline void nest_agent_sysload_req::set_net_total(::google::pb::uint32 value) {
  set_has_net_total();
  net_total_ = value;
}

// optional uint32 net_used = 7;
inline bool nest_agent_sysload_req::has_net_used() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void nest_agent_sysload_req::set_has_net_used() {
  _has_bits_[0] |= 0x00000040u;
}
inline void nest_agent_sysload_req::clear_has_net_used() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void nest_agent_sysload_req::clear_net_used() {
  net_used_ = 0u;
  clear_has_net_used();
}
inline ::google::pb::uint32 nest_agent_sysload_req::net_used() const {
  return net_used_;
}
inline void nest_agent_sysload_req::set_net_used(::google::pb::uint32 value) {
  set_has_net_used();
  net_used_ = value;
}

// repeated .nest_proc_stat stats = 31;
inline int nest_agent_sysload_req::stats_size() const {
  return stats_.size();
}
inline void nest_agent_sysload_req::clear_stats() {
  stats_.Clear();
}
inline const ::nest_proc_stat& nest_agent_sysload_req::stats(int index) const {
  return stats_.Get(index);
}
inline ::nest_proc_stat* nest_agent_sysload_req::mutable_stats(int index) {
  return stats_.Mutable(index);
}
inline ::nest_proc_stat* nest_agent_sysload_req::add_stats() {
  return stats_.Add();
}
inline const ::google::pb::RepeatedPtrField< ::nest_proc_stat >&
nest_agent_sysload_req::stats() const {
  return stats_;
}
inline ::google::pb::RepeatedPtrField< ::nest_proc_stat >*
nest_agent_sysload_req::mutable_stats() {
  return &stats_;
}

// -------------------------------------------------------------------

// nest_agent_sysload_rsp

// repeated uint32 pids = 1;
inline int nest_agent_sysload_rsp::pids_size() const {
  return pids_.size();
}
inline void nest_agent_sysload_rsp::clear_pids() {
  pids_.Clear();
}
inline ::google::pb::uint32 nest_agent_sysload_rsp::pids(int index) const {
  return pids_.Get(index);
}
inline void nest_agent_sysload_rsp::set_pids(int index, ::google::pb::uint32 value) {
  pids_.Set(index, value);
}
inline void nest_agent_sysload_rsp::add_pids(::google::pb::uint32 value) {
  pids_.Add(value);
}
inline const ::google::pb::RepeatedField< ::google::pb::uint32 >&
nest_agent_sysload_rsp::pids() const {
  return pids_;
}
inline ::google::pb::RepeatedField< ::google::pb::uint32 >*
nest_agent_sysload_rsp::mutable_pids() {
  return &pids_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace pb {


}  // namespace google
}  // namespace pb
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nest_2eproto__INCLUDED
