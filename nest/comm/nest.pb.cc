// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::pb::Descriptor* nest_msg_head_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_msg_head_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_stat_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_stat_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_base_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_base_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_node_init_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_node_init_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_node_init_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_node_init_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_node_term_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_node_term_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_service_type_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_service_type_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_load_report_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_load_report_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_add_proc_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_add_proc_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_add_proc_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_add_proc_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_del_proc_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_del_proc_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_del_proc_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_del_proc_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_restart_proc_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_restart_proc_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_restart_proc_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_restart_proc_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_service_info_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_service_info_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_sched_service_info_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_sched_service_info_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_heartbeat_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_heartbeat_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_init_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_init_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_init_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_init_rsp_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_suspend_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_suspend_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_stop_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_stop_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_proc_stat_report_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_proc_stat_report_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_agent_sysload_req_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_agent_sysload_req_reflection_ = NULL;
const ::google::pb::Descriptor* nest_agent_sysload_rsp_descriptor_ = NULL;
const ::google::pb::internal::GeneratedMessageReflection*
  nest_agent_sysload_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nest_2eproto() {
  protobuf_AddDesc_nest_2eproto();
  const ::google::pb::FileDescriptor* file =
    ::google::pb::DescriptorPool::generated_pool()->FindFileByName(
      "nest.proto");
  GOOGLE_CHECK(file != NULL);
  nest_msg_head_descriptor_ = file->message_type(0);
  static const int nest_msg_head_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, sub_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, err_msg_),
  };
  nest_msg_head_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_msg_head_descriptor_,
      nest_msg_head::default_instance_,
      nest_msg_head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_msg_head, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_msg_head));
  nest_proc_stat_descriptor_ = file->message_type(1);
  static const int nest_proc_stat_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, proc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, proxy_proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, proc_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, cpu_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, mem_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, net_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, total_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, total_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, total_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, min_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, max_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, stat_time_),
  };
  nest_proc_stat_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_stat_descriptor_,
      nest_proc_stat::default_instance_,
      nest_proc_stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_stat));
  nest_proc_base_descriptor_ = file->message_type(2);
  static const int nest_proc_base_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proc_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proxy_proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proxy_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, proxy_port_),
  };
  nest_proc_base_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_base_descriptor_,
      nest_proc_base::default_instance_,
      nest_proc_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_base, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_base));
  nest_sched_node_init_req_descriptor_ = file->message_type(3);
  static const int nest_sched_node_init_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, set_id_),
  };
  nest_sched_node_init_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_node_init_req_descriptor_,
      nest_sched_node_init_req::default_instance_,
      nest_sched_node_init_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_node_init_req));
  nest_sched_node_init_rsp_descriptor_ = file->message_type(4);
  static const int nest_sched_node_init_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, set_id_),
  };
  nest_sched_node_init_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_node_init_rsp_descriptor_,
      nest_sched_node_init_rsp::default_instance_,
      nest_sched_node_init_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_init_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_node_init_rsp));
  nest_sched_node_term_req_descriptor_ = file->message_type(5);
  static const int nest_sched_node_term_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_term_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_term_req, set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_term_req, node_ip_),
  };
  nest_sched_node_term_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_node_term_req_descriptor_,
      nest_sched_node_term_req::default_instance_,
      nest_sched_node_term_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_term_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_node_term_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_node_term_req));
  nest_service_type_descriptor_ = file->message_type(6);
  static const int nest_service_type_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_service_type, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_service_type, type_),
  };
  nest_service_type_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_service_type_descriptor_,
      nest_service_type::default_instance_,
      nest_service_type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_service_type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_service_type, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_service_type));
  nest_sched_load_report_req_descriptor_ = file->message_type(7);
  static const int nest_sched_load_report_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, cpu_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, mem_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, mem_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, net_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, net_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, last_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, srv_type_),
  };
  nest_sched_load_report_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_load_report_req_descriptor_,
      nest_sched_load_report_req::default_instance_,
      nest_sched_load_report_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_load_report_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_load_report_req));
  nest_sched_add_proc_req_descriptor_ = file->message_type(8);
  static const int nest_sched_add_proc_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, proc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, proc_conf_),
  };
  nest_sched_add_proc_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_add_proc_req_descriptor_,
      nest_sched_add_proc_req::default_instance_,
      nest_sched_add_proc_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_add_proc_req));
  nest_sched_add_proc_rsp_descriptor_ = file->message_type(9);
  static const int nest_sched_add_proc_rsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, proc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, proc_info_),
  };
  nest_sched_add_proc_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_add_proc_rsp_descriptor_,
      nest_sched_add_proc_rsp::default_instance_,
      nest_sched_add_proc_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_add_proc_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_add_proc_rsp));
  nest_sched_del_proc_req_descriptor_ = file->message_type(10);
  static const int nest_sched_del_proc_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_req, proc_list_),
  };
  nest_sched_del_proc_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_del_proc_req_descriptor_,
      nest_sched_del_proc_req::default_instance_,
      nest_sched_del_proc_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_del_proc_req));
  nest_sched_del_proc_rsp_descriptor_ = file->message_type(11);
  static const int nest_sched_del_proc_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_rsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_rsp, proc_list_),
  };
  nest_sched_del_proc_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_del_proc_rsp_descriptor_,
      nest_sched_del_proc_rsp::default_instance_,
      nest_sched_del_proc_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_del_proc_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_del_proc_rsp));
  nest_sched_restart_proc_req_descriptor_ = file->message_type(12);
  static const int nest_sched_restart_proc_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, proc_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, proc_all_),
  };
  nest_sched_restart_proc_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_restart_proc_req_descriptor_,
      nest_sched_restart_proc_req::default_instance_,
      nest_sched_restart_proc_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_restart_proc_req));
  nest_sched_restart_proc_rsp_descriptor_ = file->message_type(13);
  static const int nest_sched_restart_proc_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, proc_info_),
  };
  nest_sched_restart_proc_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_restart_proc_rsp_descriptor_,
      nest_sched_restart_proc_rsp::default_instance_,
      nest_sched_restart_proc_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_restart_proc_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_restart_proc_rsp));
  nest_sched_service_info_req_descriptor_ = file->message_type(14);
  static const int nest_sched_service_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_req, service_name_),
  };
  nest_sched_service_info_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_service_info_req_descriptor_,
      nest_sched_service_info_req::default_instance_,
      nest_sched_service_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_service_info_req));
  nest_sched_service_info_rsp_descriptor_ = file->message_type(15);
  static const int nest_sched_service_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_rsp, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_rsp, proc_cnt_),
  };
  nest_sched_service_info_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_sched_service_info_rsp_descriptor_,
      nest_sched_service_info_rsp::default_instance_,
      nest_sched_service_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_sched_service_info_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_sched_service_info_rsp));
  nest_proc_heartbeat_req_descriptor_ = file->message_type(16);
  static const int nest_proc_heartbeat_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, package_name_),
  };
  nest_proc_heartbeat_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_heartbeat_req_descriptor_,
      nest_proc_heartbeat_req::default_instance_,
      nest_proc_heartbeat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_heartbeat_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_heartbeat_req));
  nest_proc_init_req_descriptor_ = file->message_type(17);
  static const int nest_proc_init_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_req, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_req, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_req, package_name_),
  };
  nest_proc_init_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_init_req_descriptor_,
      nest_proc_init_req::default_instance_,
      nest_proc_init_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_init_req));
  nest_proc_init_rsp_descriptor_ = file->message_type(18);
  static const int nest_proc_init_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_rsp, proc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_rsp, type_),
  };
  nest_proc_init_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_init_rsp_descriptor_,
      nest_proc_init_rsp::default_instance_,
      nest_proc_init_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_init_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_init_rsp));
  nest_proc_suspend_req_descriptor_ = file->message_type(19);
  static const int nest_proc_suspend_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_suspend_req, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_suspend_req, proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_suspend_req, proc_pid_),
  };
  nest_proc_suspend_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_suspend_req_descriptor_,
      nest_proc_suspend_req::default_instance_,
      nest_proc_suspend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_suspend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_suspend_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_suspend_req));
  nest_proc_stop_req_descriptor_ = file->message_type(20);
  static const int nest_proc_stop_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stop_req, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stop_req, proc_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stop_req, proc_pid_),
  };
  nest_proc_stop_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_stop_req_descriptor_,
      nest_proc_stop_req::default_instance_,
      nest_proc_stop_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stop_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stop_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_stop_req));
  nest_proc_stat_report_req_descriptor_ = file->message_type(21);
  static const int nest_proc_stat_report_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat_report_req, stat_),
  };
  nest_proc_stat_report_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_proc_stat_report_req_descriptor_,
      nest_proc_stat_report_req::default_instance_,
      nest_proc_stat_report_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat_report_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_proc_stat_report_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_proc_stat_report_req));
  nest_agent_sysload_req_descriptor_ = file->message_type(22);
  static const int nest_agent_sysload_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, cpu_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, cpu_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, mem_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, mem_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, net_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, net_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, stats_),
  };
  nest_agent_sysload_req_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_agent_sysload_req_descriptor_,
      nest_agent_sysload_req::default_instance_,
      nest_agent_sysload_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_req, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_agent_sysload_req));
  nest_agent_sysload_rsp_descriptor_ = file->message_type(23);
  static const int nest_agent_sysload_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_rsp, pids_),
  };
  nest_agent_sysload_rsp_reflection_ =
    new ::google::pb::internal::GeneratedMessageReflection(
      nest_agent_sysload_rsp_descriptor_,
      nest_agent_sysload_rsp::default_instance_,
      nest_agent_sysload_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nest_agent_sysload_rsp, _unknown_fields_),
      -1,
      ::google::pb::DescriptorPool::generated_pool(),
      ::google::pb::MessageFactory::generated_factory(),
      sizeof(nest_agent_sysload_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::pb::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_msg_head_descriptor_, &nest_msg_head::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_stat_descriptor_, &nest_proc_stat::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_base_descriptor_, &nest_proc_base::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_node_init_req_descriptor_, &nest_sched_node_init_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_node_init_rsp_descriptor_, &nest_sched_node_init_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_node_term_req_descriptor_, &nest_sched_node_term_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_service_type_descriptor_, &nest_service_type::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_load_report_req_descriptor_, &nest_sched_load_report_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_add_proc_req_descriptor_, &nest_sched_add_proc_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_add_proc_rsp_descriptor_, &nest_sched_add_proc_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_del_proc_req_descriptor_, &nest_sched_del_proc_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_del_proc_rsp_descriptor_, &nest_sched_del_proc_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_restart_proc_req_descriptor_, &nest_sched_restart_proc_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_restart_proc_rsp_descriptor_, &nest_sched_restart_proc_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_service_info_req_descriptor_, &nest_sched_service_info_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_sched_service_info_rsp_descriptor_, &nest_sched_service_info_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_heartbeat_req_descriptor_, &nest_proc_heartbeat_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_init_req_descriptor_, &nest_proc_init_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_init_rsp_descriptor_, &nest_proc_init_rsp::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_suspend_req_descriptor_, &nest_proc_suspend_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_stop_req_descriptor_, &nest_proc_stop_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_proc_stat_report_req_descriptor_, &nest_proc_stat_report_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_agent_sysload_req_descriptor_, &nest_agent_sysload_req::default_instance());
  ::google::pb::MessageFactory::InternalRegisterGeneratedMessage(
    nest_agent_sysload_rsp_descriptor_, &nest_agent_sysload_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nest_2eproto() {
  delete nest_msg_head::default_instance_;
  delete nest_msg_head_reflection_;
  delete nest_proc_stat::default_instance_;
  delete nest_proc_stat_reflection_;
  delete nest_proc_base::default_instance_;
  delete nest_proc_base_reflection_;
  delete nest_sched_node_init_req::default_instance_;
  delete nest_sched_node_init_req_reflection_;
  delete nest_sched_node_init_rsp::default_instance_;
  delete nest_sched_node_init_rsp_reflection_;
  delete nest_sched_node_term_req::default_instance_;
  delete nest_sched_node_term_req_reflection_;
  delete nest_service_type::default_instance_;
  delete nest_service_type_reflection_;
  delete nest_sched_load_report_req::default_instance_;
  delete nest_sched_load_report_req_reflection_;
  delete nest_sched_add_proc_req::default_instance_;
  delete nest_sched_add_proc_req_reflection_;
  delete nest_sched_add_proc_rsp::default_instance_;
  delete nest_sched_add_proc_rsp_reflection_;
  delete nest_sched_del_proc_req::default_instance_;
  delete nest_sched_del_proc_req_reflection_;
  delete nest_sched_del_proc_rsp::default_instance_;
  delete nest_sched_del_proc_rsp_reflection_;
  delete nest_sched_restart_proc_req::default_instance_;
  delete nest_sched_restart_proc_req_reflection_;
  delete nest_sched_restart_proc_rsp::default_instance_;
  delete nest_sched_restart_proc_rsp_reflection_;
  delete nest_sched_service_info_req::default_instance_;
  delete nest_sched_service_info_req_reflection_;
  delete nest_sched_service_info_rsp::default_instance_;
  delete nest_sched_service_info_rsp_reflection_;
  delete nest_proc_heartbeat_req::default_instance_;
  delete nest_proc_heartbeat_req_reflection_;
  delete nest_proc_init_req::default_instance_;
  delete nest_proc_init_req_reflection_;
  delete nest_proc_init_rsp::default_instance_;
  delete nest_proc_init_rsp_reflection_;
  delete nest_proc_suspend_req::default_instance_;
  delete nest_proc_suspend_req_reflection_;
  delete nest_proc_stop_req::default_instance_;
  delete nest_proc_stop_req_reflection_;
  delete nest_proc_stat_report_req::default_instance_;
  delete nest_proc_stat_report_req_reflection_;
  delete nest_agent_sysload_req::default_instance_;
  delete nest_agent_sysload_req_reflection_;
  delete nest_agent_sysload_rsp::default_instance_;
  delete nest_agent_sysload_rsp_reflection_;
}

void protobuf_AddDesc_nest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::pb::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnest.proto\"u\n\rnest_msg_head\022\020\n\010msg_typ"
    "e\030\001 \001(\r\022\017\n\007sub_cmd\030\002 \001(\r\022\016\n\006set_id\030\003 \001(\r"
    "\022\020\n\010sequence\030\004 \001(\r\022\016\n\006result\030\005 \001(\r\022\017\n\007er"
    "r_msg\030\006 \001(\t\"\230\002\n\016nest_proc_stat\022\022\n\nservic"
    "e_id\030\001 \001(\r\022\021\n\tproc_type\030\002 \001(\r\022\017\n\007proc_no"
    "\030\003 \001(\r\022\025\n\rproxy_proc_no\030\004 \001(\r\022\020\n\010proc_pi"
    "d\030\005 \001(\r\022\020\n\010cpu_load\030\006 \001(\r\022\020\n\010mem_used\030\007 "
    "\001(\r\022\020\n\010net_used\030\010 \001(\r\022\021\n\ttotal_req\030\n \001(\004"
    "\022\021\n\ttotal_rsp\030\013 \001(\004\022\022\n\ntotal_cost\030\014 \001(\004\022"
    "\020\n\010min_cost\030\r \001(\r\022\020\n\010max_cost\030\016 \001(\r\022\021\n\ts"
    "tat_time\030\017 \001(\004\"\227\001\n\016nest_proc_base\022\022\n\nser"
    "vice_id\030\001 \001(\r\022\021\n\tproc_type\030\002 \001(\r\022\017\n\007proc"
    "_no\030\003 \001(\r\022\020\n\010proc_pid\030\004 \001(\r\022\025\n\rproxy_pro"
    "c_no\030\005 \001(\r\022\020\n\010proxy_ip\030\006 \001(\t\022\022\n\nproxy_po"
    "rt\030\007 \001(\r\"]\n\030nest_sched_node_init_req\022\017\n\007"
    "task_id\030\001 \001(\r\022\017\n\007node_ip\030\002 \001(\014\022\017\n\007server"
    "s\030\003 \003(\014\022\016\n\006set_id\030\004 \001(\r\"\\\n\030nest_sched_no"
    "de_init_rsp\022\017\n\007task_id\030\001 \001(\r\022\017\n\007node_ip\030"
    "\002 \001(\014\022\016\n\006server\030\003 \001(\014\022\016\n\006set_id\030\004 \001(\r\"L\n"
    "\030nest_sched_node_term_req\022\017\n\007task_id\030\001 \001"
    "(\r\022\016\n\006set_id\030\002 \001(\r\022\017\n\007node_ip\030\003 \001(\014\"/\n\021n"
    "est_service_type\022\014\n\004name\030\001 \001(\014\022\014\n\004type\030\002"
    " \001(\r\"\205\002\n\032nest_sched_load_report_req\022\017\n\007n"
    "ode_ip\030\001 \001(\014\022\017\n\007cpu_num\030\002 \001(\r\022\020\n\010cpu_loa"
    "d\030\003 \001(\r\022\021\n\tmem_total\030\004 \001(\r\022\020\n\010mem_used\030\005"
    " \001(\r\022\021\n\tnet_total\030\006 \001(\r\022\020\n\010net_used\030\007 \001("
    "\r\022#\n\nlast_stats\030\036 \003(\0132\017.nest_proc_stat\022\036"
    "\n\005stats\030\037 \003(\0132\017.nest_proc_stat\022$\n\010srv_ty"
    "pe\030  \003(\0132\022.nest_service_type\"\241\001\n\027nest_sc"
    "hed_add_proc_req\022\017\n\007task_id\030\001 \001(\r\022\024\n\014ser"
    "vice_name\030\002 \001(\t\022\022\n\nservice_id\030\003 \001(\r\022\021\n\tp"
    "roc_type\030\004 \001(\r\022\024\n\014package_name\030\005 \001(\t\022\"\n\t"
    "proc_conf\030\006 \003(\0132\017.nest_proc_base\"\241\001\n\027nes"
    "t_sched_add_proc_rsp\022\017\n\007task_id\030\001 \001(\r\022\024\n"
    "\014service_name\030\002 \001(\t\022\022\n\nservice_id\030\003 \001(\r\022"
    "\021\n\tproc_type\030\004 \001(\r\022\024\n\014package_name\030\005 \001(\t"
    "\022\"\n\tproc_info\030\006 \003(\0132\017.nest_proc_base\"N\n\027"
    "nest_sched_del_proc_req\022\017\n\007task_id\030\001 \001(\r"
    "\022\"\n\tproc_list\030\004 \003(\0132\017.nest_proc_base\"N\n\027"
    "nest_sched_del_proc_rsp\022\017\n\007task_id\030\001 \001(\r"
    "\022\"\n\tproc_list\030\004 \003(\0132\017.nest_proc_base\"\220\001\n"
    "\033nest_sched_restart_proc_req\022\017\n\007task_id\030"
    "\001 \001(\r\022\024\n\014service_name\030\002 \001(\t\022\024\n\014package_n"
    "ame\030\005 \001(\t\022\"\n\tproc_conf\030\006 \003(\0132\017.nest_proc"
    "_base\022\020\n\010proc_all\030\007 \001(\r\"~\n\033nest_sched_re"
    "start_proc_rsp\022\017\n\007task_id\030\001 \001(\r\022\024\n\014servi"
    "ce_name\030\002 \001(\t\022\024\n\014package_name\030\005 \001(\t\022\"\n\tp"
    "roc_info\030\006 \003(\0132\017.nest_proc_base\"D\n\033nest_"
    "sched_service_info_req\022\017\n\007task_id\030\001 \001(\r\022"
    "\024\n\014service_name\030\002 \001(\t\"@\n\033nest_sched_serv"
    "ice_info_rsp\022\017\n\007task_id\030\001 \001(\r\022\020\n\010proc_cn"
    "t\030\002 \001(\r\"s\n\027nest_proc_heartbeat_req\022\035\n\004pr"
    "oc\030\001 \001(\0132\017.nest_proc_base\022\r\n\005state\030\002 \001(\r"
    "\022\024\n\014service_name\030\003 \001(\t\022\024\n\014package_name\030\004"
    " \001(\t\"_\n\022nest_proc_init_req\022\035\n\004proc\030\001 \001(\013"
    "2\017.nest_proc_base\022\024\n\014service_name\030\003 \001(\t\022"
    "\024\n\014package_name\030\004 \001(\t\"A\n\022nest_proc_init_"
    "rsp\022\035\n\004proc\030\001 \001(\0132\017.nest_proc_base\022\014\n\004ty"
    "pe\030\002 \001(\r\"N\n\025nest_proc_suspend_req\022\022\n\nser"
    "vice_id\030\001 \001(\r\022\017\n\007proc_no\030\002 \001(\r\022\020\n\010proc_p"
    "id\030\003 \001(\r\"K\n\022nest_proc_stop_req\022\022\n\nservic"
    "e_id\030\001 \001(\r\022\017\n\007proc_no\030\002 \001(\r\022\020\n\010proc_pid\030"
    "\003 \001(\r\":\n\031nest_proc_stat_report_req\022\035\n\004st"
    "at\030\001 \001(\0132\017.nest_proc_stat\"\270\001\n\026nest_agent"
    "_sysload_req\022\017\n\007cpu_num\030\001 \001(\r\022\021\n\tcpu_tot"
    "al\030\002 \001(\r\022\020\n\010cpu_load\030\003 \001(\r\022\021\n\tmem_total\030"
    "\004 \001(\r\022\020\n\010mem_used\030\005 \001(\r\022\021\n\tnet_total\030\006 \001"
    "(\r\022\020\n\010net_used\030\007 \001(\r\022\036\n\005stats\030\037 \003(\0132\017.ne"
    "st_proc_stat\"&\n\026nest_agent_sysload_rsp\022\014"
    "\n\004pids\030\001 \003(\r", 2772);
  ::google::pb::MessageFactory::InternalRegisterGeneratedFile(
    "nest.proto", &protobuf_RegisterTypes);
  nest_msg_head::default_instance_ = new nest_msg_head();
  nest_proc_stat::default_instance_ = new nest_proc_stat();
  nest_proc_base::default_instance_ = new nest_proc_base();
  nest_sched_node_init_req::default_instance_ = new nest_sched_node_init_req();
  nest_sched_node_init_rsp::default_instance_ = new nest_sched_node_init_rsp();
  nest_sched_node_term_req::default_instance_ = new nest_sched_node_term_req();
  nest_service_type::default_instance_ = new nest_service_type();
  nest_sched_load_report_req::default_instance_ = new nest_sched_load_report_req();
  nest_sched_add_proc_req::default_instance_ = new nest_sched_add_proc_req();
  nest_sched_add_proc_rsp::default_instance_ = new nest_sched_add_proc_rsp();
  nest_sched_del_proc_req::default_instance_ = new nest_sched_del_proc_req();
  nest_sched_del_proc_rsp::default_instance_ = new nest_sched_del_proc_rsp();
  nest_sched_restart_proc_req::default_instance_ = new nest_sched_restart_proc_req();
  nest_sched_restart_proc_rsp::default_instance_ = new nest_sched_restart_proc_rsp();
  nest_sched_service_info_req::default_instance_ = new nest_sched_service_info_req();
  nest_sched_service_info_rsp::default_instance_ = new nest_sched_service_info_rsp();
  nest_proc_heartbeat_req::default_instance_ = new nest_proc_heartbeat_req();
  nest_proc_init_req::default_instance_ = new nest_proc_init_req();
  nest_proc_init_rsp::default_instance_ = new nest_proc_init_rsp();
  nest_proc_suspend_req::default_instance_ = new nest_proc_suspend_req();
  nest_proc_stop_req::default_instance_ = new nest_proc_stop_req();
  nest_proc_stat_report_req::default_instance_ = new nest_proc_stat_report_req();
  nest_agent_sysload_req::default_instance_ = new nest_agent_sysload_req();
  nest_agent_sysload_rsp::default_instance_ = new nest_agent_sysload_rsp();
  nest_msg_head::default_instance_->InitAsDefaultInstance();
  nest_proc_stat::default_instance_->InitAsDefaultInstance();
  nest_proc_base::default_instance_->InitAsDefaultInstance();
  nest_sched_node_init_req::default_instance_->InitAsDefaultInstance();
  nest_sched_node_init_rsp::default_instance_->InitAsDefaultInstance();
  nest_sched_node_term_req::default_instance_->InitAsDefaultInstance();
  nest_service_type::default_instance_->InitAsDefaultInstance();
  nest_sched_load_report_req::default_instance_->InitAsDefaultInstance();
  nest_sched_add_proc_req::default_instance_->InitAsDefaultInstance();
  nest_sched_add_proc_rsp::default_instance_->InitAsDefaultInstance();
  nest_sched_del_proc_req::default_instance_->InitAsDefaultInstance();
  nest_sched_del_proc_rsp::default_instance_->InitAsDefaultInstance();
  nest_sched_restart_proc_req::default_instance_->InitAsDefaultInstance();
  nest_sched_restart_proc_rsp::default_instance_->InitAsDefaultInstance();
  nest_sched_service_info_req::default_instance_->InitAsDefaultInstance();
  nest_sched_service_info_rsp::default_instance_->InitAsDefaultInstance();
  nest_proc_heartbeat_req::default_instance_->InitAsDefaultInstance();
  nest_proc_init_req::default_instance_->InitAsDefaultInstance();
  nest_proc_init_rsp::default_instance_->InitAsDefaultInstance();
  nest_proc_suspend_req::default_instance_->InitAsDefaultInstance();
  nest_proc_stop_req::default_instance_->InitAsDefaultInstance();
  nest_proc_stat_report_req::default_instance_->InitAsDefaultInstance();
  nest_agent_sysload_req::default_instance_->InitAsDefaultInstance();
  nest_agent_sysload_rsp::default_instance_->InitAsDefaultInstance();
  ::google::pb::internal::OnShutdown(&protobuf_ShutdownFile_nest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nest_2eproto {
  StaticDescriptorInitializer_nest_2eproto() {
    protobuf_AddDesc_nest_2eproto();
  }
} static_descriptor_initializer_nest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int nest_msg_head::kMsgTypeFieldNumber;
const int nest_msg_head::kSubCmdFieldNumber;
const int nest_msg_head::kSetIdFieldNumber;
const int nest_msg_head::kSequenceFieldNumber;
const int nest_msg_head::kResultFieldNumber;
const int nest_msg_head::kErrMsgFieldNumber;
#endif  // !_MSC_VER

nest_msg_head::nest_msg_head()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_msg_head::InitAsDefaultInstance() {
}

nest_msg_head::nest_msg_head(const nest_msg_head& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_msg_head::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0u;
  sub_cmd_ = 0u;
  set_id_ = 0u;
  sequence_ = 0u;
  result_ = 0u;
  err_msg_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_msg_head::~nest_msg_head() {
  SharedDtor();
}

void nest_msg_head::SharedDtor() {
  if (err_msg_ != &::google::pb::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void nest_msg_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_msg_head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_msg_head_descriptor_;
}

const nest_msg_head& nest_msg_head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_msg_head* nest_msg_head::default_instance_ = NULL;

nest_msg_head* nest_msg_head::New() const {
  return new nest_msg_head;
}

void nest_msg_head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0u;
    sub_cmd_ = 0u;
    set_id_ = 0u;
    sequence_ = 0u;
    result_ = 0u;
    if (has_err_msg()) {
      if (err_msg_ != &::google::pb::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_msg_head::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_cmd;
        break;
      }
      
      // optional uint32 sub_cmd = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_cmd:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_cmd_)));
          set_has_sub_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_set_id;
        break;
      }
      
      // optional uint32 set_id = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_id_)));
          set_has_set_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sequence;
        break;
      }
      
      // optional uint32 sequence = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }
      
      // optional uint32 result = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_err_msg;
        break;
      }
      
      // optional string err_msg = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_msg_head::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }
  
  // optional uint32 sub_cmd = 2;
  if (has_sub_cmd()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->sub_cmd(), output);
  }
  
  // optional uint32 set_id = 3;
  if (has_set_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->set_id(), output);
  }
  
  // optional uint32 sequence = 4;
  if (has_sequence()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->sequence(), output);
  }
  
  // optional uint32 result = 5;
  if (has_result()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }
  
  // optional string err_msg = 6;
  if (has_err_msg()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      6, this->err_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_msg_head::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }
  
  // optional uint32 sub_cmd = 2;
  if (has_sub_cmd()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->sub_cmd(), target);
  }
  
  // optional uint32 set_id = 3;
  if (has_set_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->set_id(), target);
  }
  
  // optional uint32 sequence = 4;
  if (has_sequence()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->sequence(), target);
  }
  
  // optional uint32 result = 5;
  if (has_result()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(5, this->result(), target);
  }
  
  // optional string err_msg = 6;
  if (has_err_msg()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        6, this->err_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_msg_head::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }
    
    // optional uint32 sub_cmd = 2;
    if (has_sub_cmd()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->sub_cmd());
    }
    
    // optional uint32 set_id = 3;
    if (has_set_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->set_id());
    }
    
    // optional uint32 sequence = 4;
    if (has_sequence()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }
    
    // optional uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional string err_msg = 6;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->err_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_msg_head::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_msg_head* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_msg_head*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_msg_head::MergeFrom(const nest_msg_head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_sub_cmd()) {
      set_sub_cmd(from.sub_cmd());
    }
    if (from.has_set_id()) {
      set_set_id(from.set_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_msg_head::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_msg_head::CopyFrom(const nest_msg_head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_msg_head::IsInitialized() const {
  
  return true;
}

void nest_msg_head::Swap(nest_msg_head* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(sub_cmd_, other->sub_cmd_);
    std::swap(set_id_, other->set_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(result_, other->result_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_msg_head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_msg_head_descriptor_;
  metadata.reflection = nest_msg_head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_stat::kServiceIdFieldNumber;
const int nest_proc_stat::kProcTypeFieldNumber;
const int nest_proc_stat::kProcNoFieldNumber;
const int nest_proc_stat::kProxyProcNoFieldNumber;
const int nest_proc_stat::kProcPidFieldNumber;
const int nest_proc_stat::kCpuLoadFieldNumber;
const int nest_proc_stat::kMemUsedFieldNumber;
const int nest_proc_stat::kNetUsedFieldNumber;
const int nest_proc_stat::kTotalReqFieldNumber;
const int nest_proc_stat::kTotalRspFieldNumber;
const int nest_proc_stat::kTotalCostFieldNumber;
const int nest_proc_stat::kMinCostFieldNumber;
const int nest_proc_stat::kMaxCostFieldNumber;
const int nest_proc_stat::kStatTimeFieldNumber;
#endif  // !_MSC_VER

nest_proc_stat::nest_proc_stat()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_stat::InitAsDefaultInstance() {
}

nest_proc_stat::nest_proc_stat(const nest_proc_stat& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_stat::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = 0u;
  proc_type_ = 0u;
  proc_no_ = 0u;
  proxy_proc_no_ = 0u;
  proc_pid_ = 0u;
  cpu_load_ = 0u;
  mem_used_ = 0u;
  net_used_ = 0u;
  total_req_ = GOOGLE_ULONGLONG(0);
  total_rsp_ = GOOGLE_ULONGLONG(0);
  total_cost_ = GOOGLE_ULONGLONG(0);
  min_cost_ = 0u;
  max_cost_ = 0u;
  stat_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_stat::~nest_proc_stat() {
  SharedDtor();
}

void nest_proc_stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_proc_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_stat_descriptor_;
}

const nest_proc_stat& nest_proc_stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_stat* nest_proc_stat::default_instance_ = NULL;

nest_proc_stat* nest_proc_stat::New() const {
  return new nest_proc_stat;
}

void nest_proc_stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_id_ = 0u;
    proc_type_ = 0u;
    proc_no_ = 0u;
    proxy_proc_no_ = 0u;
    proc_pid_ = 0u;
    cpu_load_ = 0u;
    mem_used_ = 0u;
    net_used_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_req_ = GOOGLE_ULONGLONG(0);
    total_rsp_ = GOOGLE_ULONGLONG(0);
    total_cost_ = GOOGLE_ULONGLONG(0);
    min_cost_ = 0u;
    max_cost_ = 0u;
    stat_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_stat::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_type;
        break;
      }
      
      // optional uint32 proc_type = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_type_)));
          set_has_proc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proc_no;
        break;
      }
      
      // optional uint32 proc_no = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_no_)));
          set_has_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proxy_proc_no;
        break;
      }
      
      // optional uint32 proxy_proc_no = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_proc_no_)));
          set_has_proxy_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proc_pid;
        break;
      }
      
      // optional uint32 proc_pid = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cpu_load;
        break;
      }
      
      // optional uint32 cpu_load = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_load:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_load_)));
          set_has_cpu_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_used;
        break;
      }
      
      // optional uint32 mem_used = 7;
      case 7: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_used_)));
          set_has_mem_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_net_used;
        break;
      }
      
      // optional uint32 net_used = 8;
      case 8: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_used_)));
          set_has_net_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_req;
        break;
      }
      
      // optional uint64 total_req = 10;
      case 10: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_req:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint64, ::google::pb::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_req_)));
          set_has_total_req();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_rsp;
        break;
      }
      
      // optional uint64 total_rsp = 11;
      case 11: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_rsp:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint64, ::google::pb::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_rsp_)));
          set_has_total_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_cost;
        break;
      }
      
      // optional uint64 total_cost = 12;
      case 12: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cost:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint64, ::google::pb::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_cost_)));
          set_has_total_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_min_cost;
        break;
      }
      
      // optional uint32 min_cost = 13;
      case 13: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_cost:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cost_)));
          set_has_min_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_cost;
        break;
      }
      
      // optional uint32 max_cost = 14;
      case 14: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cost:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cost_)));
          set_has_max_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_stat_time;
        break;
      }
      
      // optional uint64 stat_time = 15;
      case 15: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_time:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint64, ::google::pb::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stat_time_)));
          set_has_stat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_stat::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }
  
  // optional uint32 proc_type = 2;
  if (has_proc_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->proc_type(), output);
  }
  
  // optional uint32 proc_no = 3;
  if (has_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->proc_no(), output);
  }
  
  // optional uint32 proxy_proc_no = 4;
  if (has_proxy_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->proxy_proc_no(), output);
  }
  
  // optional uint32 proc_pid = 5;
  if (has_proc_pid()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(5, this->proc_pid(), output);
  }
  
  // optional uint32 cpu_load = 6;
  if (has_cpu_load()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(6, this->cpu_load(), output);
  }
  
  // optional uint32 mem_used = 7;
  if (has_mem_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(7, this->mem_used(), output);
  }
  
  // optional uint32 net_used = 8;
  if (has_net_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(8, this->net_used(), output);
  }
  
  // optional uint64 total_req = 10;
  if (has_total_req()) {
    ::google::pb::internal::WireFormatLite::WriteUInt64(10, this->total_req(), output);
  }
  
  // optional uint64 total_rsp = 11;
  if (has_total_rsp()) {
    ::google::pb::internal::WireFormatLite::WriteUInt64(11, this->total_rsp(), output);
  }
  
  // optional uint64 total_cost = 12;
  if (has_total_cost()) {
    ::google::pb::internal::WireFormatLite::WriteUInt64(12, this->total_cost(), output);
  }
  
  // optional uint32 min_cost = 13;
  if (has_min_cost()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(13, this->min_cost(), output);
  }
  
  // optional uint32 max_cost = 14;
  if (has_max_cost()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(14, this->max_cost(), output);
  }
  
  // optional uint64 stat_time = 15;
  if (has_stat_time()) {
    ::google::pb::internal::WireFormatLite::WriteUInt64(15, this->stat_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_stat::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }
  
  // optional uint32 proc_type = 2;
  if (has_proc_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_type(), target);
  }
  
  // optional uint32 proc_no = 3;
  if (has_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->proc_no(), target);
  }
  
  // optional uint32 proxy_proc_no = 4;
  if (has_proxy_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->proxy_proc_no(), target);
  }
  
  // optional uint32 proc_pid = 5;
  if (has_proc_pid()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(5, this->proc_pid(), target);
  }
  
  // optional uint32 cpu_load = 6;
  if (has_cpu_load()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(6, this->cpu_load(), target);
  }
  
  // optional uint32 mem_used = 7;
  if (has_mem_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(7, this->mem_used(), target);
  }
  
  // optional uint32 net_used = 8;
  if (has_net_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(8, this->net_used(), target);
  }
  
  // optional uint64 total_req = 10;
  if (has_total_req()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_req(), target);
  }
  
  // optional uint64 total_rsp = 11;
  if (has_total_rsp()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt64ToArray(11, this->total_rsp(), target);
  }
  
  // optional uint64 total_cost = 12;
  if (has_total_cost()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt64ToArray(12, this->total_cost(), target);
  }
  
  // optional uint32 min_cost = 13;
  if (has_min_cost()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(13, this->min_cost(), target);
  }
  
  // optional uint32 max_cost = 14;
  if (has_max_cost()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_cost(), target);
  }
  
  // optional uint64 stat_time = 15;
  if (has_stat_time()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt64ToArray(15, this->stat_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_stat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_type = 2;
    if (has_proc_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_type());
    }
    
    // optional uint32 proc_no = 3;
    if (has_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_no());
    }
    
    // optional uint32 proxy_proc_no = 4;
    if (has_proxy_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proxy_proc_no());
    }
    
    // optional uint32 proc_pid = 5;
    if (has_proc_pid()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }
    
    // optional uint32 cpu_load = 6;
    if (has_cpu_load()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_load());
    }
    
    // optional uint32 mem_used = 7;
    if (has_mem_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->mem_used());
    }
    
    // optional uint32 net_used = 8;
    if (has_net_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->net_used());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 total_req = 10;
    if (has_total_req()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt64Size(
          this->total_req());
    }
    
    // optional uint64 total_rsp = 11;
    if (has_total_rsp()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt64Size(
          this->total_rsp());
    }
    
    // optional uint64 total_cost = 12;
    if (has_total_cost()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt64Size(
          this->total_cost());
    }
    
    // optional uint32 min_cost = 13;
    if (has_min_cost()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->min_cost());
    }
    
    // optional uint32 max_cost = 14;
    if (has_max_cost()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->max_cost());
    }
    
    // optional uint64 stat_time = 15;
    if (has_stat_time()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt64Size(
          this->stat_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_stat::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_stat* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_stat*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_stat::MergeFrom(const nest_proc_stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_type()) {
      set_proc_type(from.proc_type());
    }
    if (from.has_proc_no()) {
      set_proc_no(from.proc_no());
    }
    if (from.has_proxy_proc_no()) {
      set_proxy_proc_no(from.proxy_proc_no());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
    if (from.has_cpu_load()) {
      set_cpu_load(from.cpu_load());
    }
    if (from.has_mem_used()) {
      set_mem_used(from.mem_used());
    }
    if (from.has_net_used()) {
      set_net_used(from.net_used());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_req()) {
      set_total_req(from.total_req());
    }
    if (from.has_total_rsp()) {
      set_total_rsp(from.total_rsp());
    }
    if (from.has_total_cost()) {
      set_total_cost(from.total_cost());
    }
    if (from.has_min_cost()) {
      set_min_cost(from.min_cost());
    }
    if (from.has_max_cost()) {
      set_max_cost(from.max_cost());
    }
    if (from.has_stat_time()) {
      set_stat_time(from.stat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_stat::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_stat::CopyFrom(const nest_proc_stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_stat::IsInitialized() const {
  
  return true;
}

void nest_proc_stat::Swap(nest_proc_stat* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(proc_type_, other->proc_type_);
    std::swap(proc_no_, other->proc_no_);
    std::swap(proxy_proc_no_, other->proxy_proc_no_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(cpu_load_, other->cpu_load_);
    std::swap(mem_used_, other->mem_used_);
    std::swap(net_used_, other->net_used_);
    std::swap(total_req_, other->total_req_);
    std::swap(total_rsp_, other->total_rsp_);
    std::swap(total_cost_, other->total_cost_);
    std::swap(min_cost_, other->min_cost_);
    std::swap(max_cost_, other->max_cost_);
    std::swap(stat_time_, other->stat_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_stat_descriptor_;
  metadata.reflection = nest_proc_stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_base::kServiceIdFieldNumber;
const int nest_proc_base::kProcTypeFieldNumber;
const int nest_proc_base::kProcNoFieldNumber;
const int nest_proc_base::kProcPidFieldNumber;
const int nest_proc_base::kProxyProcNoFieldNumber;
const int nest_proc_base::kProxyIpFieldNumber;
const int nest_proc_base::kProxyPortFieldNumber;
#endif  // !_MSC_VER

nest_proc_base::nest_proc_base()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_base::InitAsDefaultInstance() {
}

nest_proc_base::nest_proc_base(const nest_proc_base& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_base::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = 0u;
  proc_type_ = 0u;
  proc_no_ = 0u;
  proc_pid_ = 0u;
  proxy_proc_no_ = 0u;
  proxy_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  proxy_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_base::~nest_proc_base() {
  SharedDtor();
}

void nest_proc_base::SharedDtor() {
  if (proxy_ip_ != &::google::pb::internal::kEmptyString) {
    delete proxy_ip_;
  }
  if (this != default_instance_) {
  }
}

void nest_proc_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_base_descriptor_;
}

const nest_proc_base& nest_proc_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_base* nest_proc_base::default_instance_ = NULL;

nest_proc_base* nest_proc_base::New() const {
  return new nest_proc_base;
}

void nest_proc_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_id_ = 0u;
    proc_type_ = 0u;
    proc_no_ = 0u;
    proc_pid_ = 0u;
    proxy_proc_no_ = 0u;
    if (has_proxy_ip()) {
      if (proxy_ip_ != &::google::pb::internal::kEmptyString) {
        proxy_ip_->clear();
      }
    }
    proxy_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_base::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_type;
        break;
      }
      
      // optional uint32 proc_type = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_type_)));
          set_has_proc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proc_no;
        break;
      }
      
      // optional uint32 proc_no = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_no_)));
          set_has_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proc_pid;
        break;
      }
      
      // optional uint32 proc_pid = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_proc_no;
        break;
      }
      
      // optional uint32 proxy_proc_no = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_proc_no_)));
          set_has_proxy_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proxy_ip;
        break;
      }
      
      // optional string proxy_ip = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_ip:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_ip()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->proxy_ip().data(), this->proxy_ip().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_proxy_port;
        break;
      }
      
      // optional uint32 proxy_port = 7;
      case 7: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_port:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_port_)));
          set_has_proxy_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_base::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }
  
  // optional uint32 proc_type = 2;
  if (has_proc_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->proc_type(), output);
  }
  
  // optional uint32 proc_no = 3;
  if (has_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->proc_no(), output);
  }
  
  // optional uint32 proc_pid = 4;
  if (has_proc_pid()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->proc_pid(), output);
  }
  
  // optional uint32 proxy_proc_no = 5;
  if (has_proxy_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(5, this->proxy_proc_no(), output);
  }
  
  // optional string proxy_ip = 6;
  if (has_proxy_ip()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->proxy_ip().data(), this->proxy_ip().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      6, this->proxy_ip(), output);
  }
  
  // optional uint32 proxy_port = 7;
  if (has_proxy_port()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(7, this->proxy_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_base::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }
  
  // optional uint32 proc_type = 2;
  if (has_proc_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_type(), target);
  }
  
  // optional uint32 proc_no = 3;
  if (has_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->proc_no(), target);
  }
  
  // optional uint32 proc_pid = 4;
  if (has_proc_pid()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->proc_pid(), target);
  }
  
  // optional uint32 proxy_proc_no = 5;
  if (has_proxy_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_proc_no(), target);
  }
  
  // optional string proxy_ip = 6;
  if (has_proxy_ip()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->proxy_ip().data(), this->proxy_ip().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        6, this->proxy_ip(), target);
  }
  
  // optional uint32 proxy_port = 7;
  if (has_proxy_port()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(7, this->proxy_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_base::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_type = 2;
    if (has_proc_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_type());
    }
    
    // optional uint32 proc_no = 3;
    if (has_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_no());
    }
    
    // optional uint32 proc_pid = 4;
    if (has_proc_pid()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }
    
    // optional uint32 proxy_proc_no = 5;
    if (has_proxy_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proxy_proc_no());
    }
    
    // optional string proxy_ip = 6;
    if (has_proxy_ip()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->proxy_ip());
    }
    
    // optional uint32 proxy_port = 7;
    if (has_proxy_port()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proxy_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_base::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_base* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_base*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_base::MergeFrom(const nest_proc_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_type()) {
      set_proc_type(from.proc_type());
    }
    if (from.has_proc_no()) {
      set_proc_no(from.proc_no());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
    if (from.has_proxy_proc_no()) {
      set_proxy_proc_no(from.proxy_proc_no());
    }
    if (from.has_proxy_ip()) {
      set_proxy_ip(from.proxy_ip());
    }
    if (from.has_proxy_port()) {
      set_proxy_port(from.proxy_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_base::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_base::CopyFrom(const nest_proc_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_base::IsInitialized() const {
  
  return true;
}

void nest_proc_base::Swap(nest_proc_base* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(proc_type_, other->proc_type_);
    std::swap(proc_no_, other->proc_no_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(proxy_proc_no_, other->proxy_proc_no_);
    std::swap(proxy_ip_, other->proxy_ip_);
    std::swap(proxy_port_, other->proxy_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_base_descriptor_;
  metadata.reflection = nest_proc_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_node_init_req::kTaskIdFieldNumber;
const int nest_sched_node_init_req::kNodeIpFieldNumber;
const int nest_sched_node_init_req::kServersFieldNumber;
const int nest_sched_node_init_req::kSetIdFieldNumber;
#endif  // !_MSC_VER

nest_sched_node_init_req::nest_sched_node_init_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_node_init_req::InitAsDefaultInstance() {
}

nest_sched_node_init_req::nest_sched_node_init_req(const nest_sched_node_init_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_node_init_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  set_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_node_init_req::~nest_sched_node_init_req() {
  SharedDtor();
}

void nest_sched_node_init_req::SharedDtor() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_node_init_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_node_init_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_node_init_req_descriptor_;
}

const nest_sched_node_init_req& nest_sched_node_init_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_node_init_req* nest_sched_node_init_req::default_instance_ = NULL;

nest_sched_node_init_req* nest_sched_node_init_req::New() const {
  return new nest_sched_node_init_req;
}

void nest_sched_node_init_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_node_ip()) {
      if (node_ip_ != &::google::pb::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    set_id_ = 0u;
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_node_init_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_ip;
        break;
      }
      
      // optional bytes node_ip = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ip:
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servers;
        break;
      }
      
      // repeated bytes servers = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servers;
        if (input->ExpectTag(32)) goto parse_set_id;
        break;
      }
      
      // optional uint32 set_id = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_id_)));
          set_has_set_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_node_init_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional bytes node_ip = 2;
  if (has_node_ip()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      2, this->node_ip(), output);
  }
  
  // repeated bytes servers = 3;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      3, this->servers(i), output);
  }
  
  // optional uint32 set_id = 4;
  if (has_set_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->set_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_node_init_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional bytes node_ip = 2;
  if (has_node_ip()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        2, this->node_ip(), target);
  }
  
  // repeated bytes servers = 3;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteBytesToArray(3, this->servers(i), target);
  }
  
  // optional uint32 set_id = 4;
  if (has_set_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->set_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_node_init_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional bytes node_ip = 2;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }
    
    // optional uint32 set_id = 4;
    if (has_set_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->set_id());
    }
    
  }
  // repeated bytes servers = 3;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size += ::google::pb::internal::WireFormatLite::BytesSize(
      this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_node_init_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_node_init_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_node_init_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_node_init_req::MergeFrom(const nest_sched_node_init_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_set_id()) {
      set_set_id(from.set_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_node_init_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_node_init_req::CopyFrom(const nest_sched_node_init_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_node_init_req::IsInitialized() const {
  
  return true;
}

void nest_sched_node_init_req::Swap(nest_sched_node_init_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(node_ip_, other->node_ip_);
    servers_.Swap(&other->servers_);
    std::swap(set_id_, other->set_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_node_init_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_node_init_req_descriptor_;
  metadata.reflection = nest_sched_node_init_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_node_init_rsp::kTaskIdFieldNumber;
const int nest_sched_node_init_rsp::kNodeIpFieldNumber;
const int nest_sched_node_init_rsp::kServerFieldNumber;
const int nest_sched_node_init_rsp::kSetIdFieldNumber;
#endif  // !_MSC_VER

nest_sched_node_init_rsp::nest_sched_node_init_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_node_init_rsp::InitAsDefaultInstance() {
}

nest_sched_node_init_rsp::nest_sched_node_init_rsp(const nest_sched_node_init_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_node_init_rsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  server_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  set_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_node_init_rsp::~nest_sched_node_init_rsp() {
  SharedDtor();
}

void nest_sched_node_init_rsp::SharedDtor() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    delete node_ip_;
  }
  if (server_ != &::google::pb::internal::kEmptyString) {
    delete server_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_node_init_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_node_init_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_node_init_rsp_descriptor_;
}

const nest_sched_node_init_rsp& nest_sched_node_init_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_node_init_rsp* nest_sched_node_init_rsp::default_instance_ = NULL;

nest_sched_node_init_rsp* nest_sched_node_init_rsp::New() const {
  return new nest_sched_node_init_rsp;
}

void nest_sched_node_init_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_node_ip()) {
      if (node_ip_ != &::google::pb::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    if (has_server()) {
      if (server_ != &::google::pb::internal::kEmptyString) {
        server_->clear();
      }
    }
    set_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_node_init_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_ip;
        break;
      }
      
      // optional bytes node_ip = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ip:
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // optional bytes server = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_set_id;
        break;
      }
      
      // optional uint32 set_id = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_id_)));
          set_has_set_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_node_init_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional bytes node_ip = 2;
  if (has_node_ip()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      2, this->node_ip(), output);
  }
  
  // optional bytes server = 3;
  if (has_server()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      3, this->server(), output);
  }
  
  // optional uint32 set_id = 4;
  if (has_set_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->set_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_node_init_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional bytes node_ip = 2;
  if (has_node_ip()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        2, this->node_ip(), target);
  }
  
  // optional bytes server = 3;
  if (has_server()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        3, this->server(), target);
  }
  
  // optional uint32 set_id = 4;
  if (has_set_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->set_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_node_init_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional bytes node_ip = 2;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }
    
    // optional bytes server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->server());
    }
    
    // optional uint32 set_id = 4;
    if (has_set_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->set_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_node_init_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_node_init_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_node_init_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_node_init_rsp::MergeFrom(const nest_sched_node_init_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_set_id()) {
      set_set_id(from.set_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_node_init_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_node_init_rsp::CopyFrom(const nest_sched_node_init_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_node_init_rsp::IsInitialized() const {
  
  return true;
}

void nest_sched_node_init_rsp::Swap(nest_sched_node_init_rsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(node_ip_, other->node_ip_);
    std::swap(server_, other->server_);
    std::swap(set_id_, other->set_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_node_init_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_node_init_rsp_descriptor_;
  metadata.reflection = nest_sched_node_init_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_node_term_req::kTaskIdFieldNumber;
const int nest_sched_node_term_req::kSetIdFieldNumber;
const int nest_sched_node_term_req::kNodeIpFieldNumber;
#endif  // !_MSC_VER

nest_sched_node_term_req::nest_sched_node_term_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_node_term_req::InitAsDefaultInstance() {
}

nest_sched_node_term_req::nest_sched_node_term_req(const nest_sched_node_term_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_node_term_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  set_id_ = 0u;
  node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_node_term_req::~nest_sched_node_term_req() {
  SharedDtor();
}

void nest_sched_node_term_req::SharedDtor() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_node_term_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_node_term_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_node_term_req_descriptor_;
}

const nest_sched_node_term_req& nest_sched_node_term_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_node_term_req* nest_sched_node_term_req::default_instance_ = NULL;

nest_sched_node_term_req* nest_sched_node_term_req::New() const {
  return new nest_sched_node_term_req;
}

void nest_sched_node_term_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    set_id_ = 0u;
    if (has_node_ip()) {
      if (node_ip_ != &::google::pb::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_node_term_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_set_id;
        break;
      }
      
      // optional uint32 set_id = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_id_)));
          set_has_set_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_ip;
        break;
      }
      
      // optional bytes node_ip = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ip:
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_node_term_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional uint32 set_id = 2;
  if (has_set_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->set_id(), output);
  }
  
  // optional bytes node_ip = 3;
  if (has_node_ip()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      3, this->node_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_node_term_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional uint32 set_id = 2;
  if (has_set_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->set_id(), target);
  }
  
  // optional bytes node_ip = 3;
  if (has_node_ip()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        3, this->node_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_node_term_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional uint32 set_id = 2;
    if (has_set_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->set_id());
    }
    
    // optional bytes node_ip = 3;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_node_term_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_node_term_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_node_term_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_node_term_req::MergeFrom(const nest_sched_node_term_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_set_id()) {
      set_set_id(from.set_id());
    }
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_node_term_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_node_term_req::CopyFrom(const nest_sched_node_term_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_node_term_req::IsInitialized() const {
  
  return true;
}

void nest_sched_node_term_req::Swap(nest_sched_node_term_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(set_id_, other->set_id_);
    std::swap(node_ip_, other->node_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_node_term_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_node_term_req_descriptor_;
  metadata.reflection = nest_sched_node_term_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_service_type::kNameFieldNumber;
const int nest_service_type::kTypeFieldNumber;
#endif  // !_MSC_VER

nest_service_type::nest_service_type()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_service_type::InitAsDefaultInstance() {
}

nest_service_type::nest_service_type(const nest_service_type& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_service_type::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_service_type::~nest_service_type() {
  SharedDtor();
}

void nest_service_type::SharedDtor() {
  if (name_ != &::google::pb::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void nest_service_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_service_type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_service_type_descriptor_;
}

const nest_service_type& nest_service_type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_service_type* nest_service_type::default_instance_ = NULL;

nest_service_type* nest_service_type::New() const {
  return new nest_service_type;
}

void nest_service_type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::pb::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_service_type::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_service_type::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_service_type::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_service_type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_service_type::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_service_type* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_service_type*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_service_type::MergeFrom(const nest_service_type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_service_type::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_service_type::CopyFrom(const nest_service_type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_service_type::IsInitialized() const {
  
  return true;
}

void nest_service_type::Swap(nest_service_type* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_service_type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_service_type_descriptor_;
  metadata.reflection = nest_service_type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_load_report_req::kNodeIpFieldNumber;
const int nest_sched_load_report_req::kCpuNumFieldNumber;
const int nest_sched_load_report_req::kCpuLoadFieldNumber;
const int nest_sched_load_report_req::kMemTotalFieldNumber;
const int nest_sched_load_report_req::kMemUsedFieldNumber;
const int nest_sched_load_report_req::kNetTotalFieldNumber;
const int nest_sched_load_report_req::kNetUsedFieldNumber;
const int nest_sched_load_report_req::kLastStatsFieldNumber;
const int nest_sched_load_report_req::kStatsFieldNumber;
const int nest_sched_load_report_req::kSrvTypeFieldNumber;
#endif  // !_MSC_VER

nest_sched_load_report_req::nest_sched_load_report_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_load_report_req::InitAsDefaultInstance() {
}

nest_sched_load_report_req::nest_sched_load_report_req(const nest_sched_load_report_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_load_report_req::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  cpu_num_ = 0u;
  cpu_load_ = 0u;
  mem_total_ = 0u;
  mem_used_ = 0u;
  net_total_ = 0u;
  net_used_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_load_report_req::~nest_sched_load_report_req() {
  SharedDtor();
}

void nest_sched_load_report_req::SharedDtor() {
  if (node_ip_ != &::google::pb::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_load_report_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_load_report_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_load_report_req_descriptor_;
}

const nest_sched_load_report_req& nest_sched_load_report_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_load_report_req* nest_sched_load_report_req::default_instance_ = NULL;

nest_sched_load_report_req* nest_sched_load_report_req::New() const {
  return new nest_sched_load_report_req;
}

void nest_sched_load_report_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_ip()) {
      if (node_ip_ != &::google::pb::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    cpu_num_ = 0u;
    cpu_load_ = 0u;
    mem_total_ = 0u;
    mem_used_ = 0u;
    net_total_ = 0u;
    net_used_ = 0u;
  }
  last_stats_.Clear();
  stats_.Clear();
  srv_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_load_report_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node_ip = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_num;
        break;
      }
      
      // optional uint32 cpu_num = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_num:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_load;
        break;
      }
      
      // optional uint32 cpu_load = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_load:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_load_)));
          set_has_cpu_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mem_total;
        break;
      }
      
      // optional uint32 mem_total = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_total:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_total_)));
          set_has_mem_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_used;
        break;
      }
      
      // optional uint32 mem_used = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_used_)));
          set_has_mem_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_net_total;
        break;
      }
      
      // optional uint32 net_total = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_total:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_total_)));
          set_has_net_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_net_used;
        break;
      }
      
      // optional uint32 net_used = 7;
      case 7: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_used_)));
          set_has_net_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_last_stats;
        break;
      }
      
      // repeated .nest_proc_stat last_stats = 30;
      case 30: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_stats:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_last_stats;
        if (input->ExpectTag(250)) goto parse_stats;
        break;
      }
      
      // repeated .nest_proc_stat stats = 31;
      case 31: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_stats;
        if (input->ExpectTag(258)) goto parse_srv_type;
        break;
      }
      
      // repeated .nest_service_type srv_type = 32;
      case 32: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srv_type:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_srv_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_srv_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_load_report_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional bytes node_ip = 1;
  if (has_node_ip()) {
    ::google::pb::internal::WireFormatLite::WriteBytes(
      1, this->node_ip(), output);
  }
  
  // optional uint32 cpu_num = 2;
  if (has_cpu_num()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->cpu_num(), output);
  }
  
  // optional uint32 cpu_load = 3;
  if (has_cpu_load()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->cpu_load(), output);
  }
  
  // optional uint32 mem_total = 4;
  if (has_mem_total()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->mem_total(), output);
  }
  
  // optional uint32 mem_used = 5;
  if (has_mem_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(5, this->mem_used(), output);
  }
  
  // optional uint32 net_total = 6;
  if (has_net_total()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(6, this->net_total(), output);
  }
  
  // optional uint32 net_used = 7;
  if (has_net_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(7, this->net_used(), output);
  }
  
  // repeated .nest_proc_stat last_stats = 30;
  for (int i = 0; i < this->last_stats_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->last_stats(i), output);
  }
  
  // repeated .nest_proc_stat stats = 31;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->stats(i), output);
  }
  
  // repeated .nest_service_type srv_type = 32;
  for (int i = 0; i < this->srv_type_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->srv_type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_load_report_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional bytes node_ip = 1;
  if (has_node_ip()) {
    target =
      ::google::pb::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_ip(), target);
  }
  
  // optional uint32 cpu_num = 2;
  if (has_cpu_num()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_num(), target);
  }
  
  // optional uint32 cpu_load = 3;
  if (has_cpu_load()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->cpu_load(), target);
  }
  
  // optional uint32 mem_total = 4;
  if (has_mem_total()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->mem_total(), target);
  }
  
  // optional uint32 mem_used = 5;
  if (has_mem_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(5, this->mem_used(), target);
  }
  
  // optional uint32 net_total = 6;
  if (has_net_total()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(6, this->net_total(), target);
  }
  
  // optional uint32 net_used = 7;
  if (has_net_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(7, this->net_used(), target);
  }
  
  // repeated .nest_proc_stat last_stats = 30;
  for (int i = 0; i < this->last_stats_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->last_stats(i), target);
  }
  
  // repeated .nest_proc_stat stats = 31;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->stats(i), target);
  }
  
  // repeated .nest_service_type srv_type = 32;
  for (int i = 0; i < this->srv_type_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->srv_type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_load_report_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::BytesSize(
          this->node_ip());
    }
    
    // optional uint32 cpu_num = 2;
    if (has_cpu_num()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_num());
    }
    
    // optional uint32 cpu_load = 3;
    if (has_cpu_load()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_load());
    }
    
    // optional uint32 mem_total = 4;
    if (has_mem_total()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->mem_total());
    }
    
    // optional uint32 mem_used = 5;
    if (has_mem_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->mem_used());
    }
    
    // optional uint32 net_total = 6;
    if (has_net_total()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->net_total());
    }
    
    // optional uint32 net_used = 7;
    if (has_net_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->net_used());
    }
    
  }
  // repeated .nest_proc_stat last_stats = 30;
  total_size += 2 * this->last_stats_size();
  for (int i = 0; i < this->last_stats_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_stats(i));
  }
  
  // repeated .nest_proc_stat stats = 31;
  total_size += 2 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  // repeated .nest_service_type srv_type = 32;
  total_size += 2 * this->srv_type_size();
  for (int i = 0; i < this->srv_type_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srv_type(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_load_report_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_load_report_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_load_report_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_load_report_req::MergeFrom(const nest_sched_load_report_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_stats_.MergeFrom(from.last_stats_);
  stats_.MergeFrom(from.stats_);
  srv_type_.MergeFrom(from.srv_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_load()) {
      set_cpu_load(from.cpu_load());
    }
    if (from.has_mem_total()) {
      set_mem_total(from.mem_total());
    }
    if (from.has_mem_used()) {
      set_mem_used(from.mem_used());
    }
    if (from.has_net_total()) {
      set_net_total(from.net_total());
    }
    if (from.has_net_used()) {
      set_net_used(from.net_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_load_report_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_load_report_req::CopyFrom(const nest_sched_load_report_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_load_report_req::IsInitialized() const {
  
  return true;
}

void nest_sched_load_report_req::Swap(nest_sched_load_report_req* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_load_, other->cpu_load_);
    std::swap(mem_total_, other->mem_total_);
    std::swap(mem_used_, other->mem_used_);
    std::swap(net_total_, other->net_total_);
    std::swap(net_used_, other->net_used_);
    last_stats_.Swap(&other->last_stats_);
    stats_.Swap(&other->stats_);
    srv_type_.Swap(&other->srv_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_load_report_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_load_report_req_descriptor_;
  metadata.reflection = nest_sched_load_report_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_add_proc_req::kTaskIdFieldNumber;
const int nest_sched_add_proc_req::kServiceNameFieldNumber;
const int nest_sched_add_proc_req::kServiceIdFieldNumber;
const int nest_sched_add_proc_req::kProcTypeFieldNumber;
const int nest_sched_add_proc_req::kPackageNameFieldNumber;
const int nest_sched_add_proc_req::kProcConfFieldNumber;
#endif  // !_MSC_VER

nest_sched_add_proc_req::nest_sched_add_proc_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_add_proc_req::InitAsDefaultInstance() {
}

nest_sched_add_proc_req::nest_sched_add_proc_req(const nest_sched_add_proc_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_add_proc_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  service_id_ = 0u;
  proc_type_ = 0u;
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_add_proc_req::~nest_sched_add_proc_req() {
  SharedDtor();
}

void nest_sched_add_proc_req::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_add_proc_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_add_proc_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_add_proc_req_descriptor_;
}

const nest_sched_add_proc_req& nest_sched_add_proc_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_add_proc_req* nest_sched_add_proc_req::default_instance_ = NULL;

nest_sched_add_proc_req* nest_sched_add_proc_req::New() const {
  return new nest_sched_add_proc_req;
}

void nest_sched_add_proc_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    service_id_ = 0u;
    proc_type_ = 0u;
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
  }
  proc_conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_add_proc_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }
      
      // optional uint32 service_id = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proc_type;
        break;
      }
      
      // optional uint32 proc_type = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_type_)));
          set_has_proc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_conf;
        break;
      }
      
      // repeated .nest_proc_base proc_conf = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_conf:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_conf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_conf;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_add_proc_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }
  
  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }
  
  // optional uint32 proc_type = 4;
  if (has_proc_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->proc_type(), output);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      5, this->package_name(), output);
  }
  
  // repeated .nest_proc_base proc_conf = 6;
  for (int i = 0; i < this->proc_conf_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_conf(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_add_proc_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }
  
  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }
  
  // optional uint32 proc_type = 4;
  if (has_proc_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->proc_type(), target);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }
  
  // repeated .nest_proc_base proc_conf = 6;
  for (int i = 0; i < this->proc_conf_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_conf(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_add_proc_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_type = 4;
    if (has_proc_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_type());
    }
    
    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
  }
  // repeated .nest_proc_base proc_conf = 6;
  total_size += 1 * this->proc_conf_size();
  for (int i = 0; i < this->proc_conf_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_conf(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_add_proc_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_add_proc_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_add_proc_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_add_proc_req::MergeFrom(const nest_sched_add_proc_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_conf_.MergeFrom(from.proc_conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_type()) {
      set_proc_type(from.proc_type());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_add_proc_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_add_proc_req::CopyFrom(const nest_sched_add_proc_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_add_proc_req::IsInitialized() const {
  
  return true;
}

void nest_sched_add_proc_req::Swap(nest_sched_add_proc_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(service_id_, other->service_id_);
    std::swap(proc_type_, other->proc_type_);
    std::swap(package_name_, other->package_name_);
    proc_conf_.Swap(&other->proc_conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_add_proc_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_add_proc_req_descriptor_;
  metadata.reflection = nest_sched_add_proc_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_add_proc_rsp::kTaskIdFieldNumber;
const int nest_sched_add_proc_rsp::kServiceNameFieldNumber;
const int nest_sched_add_proc_rsp::kServiceIdFieldNumber;
const int nest_sched_add_proc_rsp::kProcTypeFieldNumber;
const int nest_sched_add_proc_rsp::kPackageNameFieldNumber;
const int nest_sched_add_proc_rsp::kProcInfoFieldNumber;
#endif  // !_MSC_VER

nest_sched_add_proc_rsp::nest_sched_add_proc_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_add_proc_rsp::InitAsDefaultInstance() {
}

nest_sched_add_proc_rsp::nest_sched_add_proc_rsp(const nest_sched_add_proc_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_add_proc_rsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  service_id_ = 0u;
  proc_type_ = 0u;
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_add_proc_rsp::~nest_sched_add_proc_rsp() {
  SharedDtor();
}

void nest_sched_add_proc_rsp::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_add_proc_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_add_proc_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_add_proc_rsp_descriptor_;
}

const nest_sched_add_proc_rsp& nest_sched_add_proc_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_add_proc_rsp* nest_sched_add_proc_rsp::default_instance_ = NULL;

nest_sched_add_proc_rsp* nest_sched_add_proc_rsp::New() const {
  return new nest_sched_add_proc_rsp;
}

void nest_sched_add_proc_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    service_id_ = 0u;
    proc_type_ = 0u;
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
  }
  proc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_add_proc_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }
      
      // optional uint32 service_id = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_id:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proc_type;
        break;
      }
      
      // optional uint32 proc_type = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_type_)));
          set_has_proc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_info;
        break;
      }
      
      // repeated .nest_proc_base proc_info = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_info:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_add_proc_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }
  
  // optional uint32 service_id = 3;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }
  
  // optional uint32 proc_type = 4;
  if (has_proc_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->proc_type(), output);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      5, this->package_name(), output);
  }
  
  // repeated .nest_proc_base proc_info = 6;
  for (int i = 0; i < this->proc_info_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_add_proc_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }
  
  // optional uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }
  
  // optional uint32 proc_type = 4;
  if (has_proc_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->proc_type(), target);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }
  
  // repeated .nest_proc_base proc_info = 6;
  for (int i = 0; i < this->proc_info_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_add_proc_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_type = 4;
    if (has_proc_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_type());
    }
    
    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
  }
  // repeated .nest_proc_base proc_info = 6;
  total_size += 1 * this->proc_info_size();
  for (int i = 0; i < this->proc_info_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_add_proc_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_add_proc_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_add_proc_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_add_proc_rsp::MergeFrom(const nest_sched_add_proc_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_info_.MergeFrom(from.proc_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_type()) {
      set_proc_type(from.proc_type());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_add_proc_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_add_proc_rsp::CopyFrom(const nest_sched_add_proc_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_add_proc_rsp::IsInitialized() const {
  
  return true;
}

void nest_sched_add_proc_rsp::Swap(nest_sched_add_proc_rsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(service_id_, other->service_id_);
    std::swap(proc_type_, other->proc_type_);
    std::swap(package_name_, other->package_name_);
    proc_info_.Swap(&other->proc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_add_proc_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_add_proc_rsp_descriptor_;
  metadata.reflection = nest_sched_add_proc_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_del_proc_req::kTaskIdFieldNumber;
const int nest_sched_del_proc_req::kProcListFieldNumber;
#endif  // !_MSC_VER

nest_sched_del_proc_req::nest_sched_del_proc_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_del_proc_req::InitAsDefaultInstance() {
}

nest_sched_del_proc_req::nest_sched_del_proc_req(const nest_sched_del_proc_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_del_proc_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_del_proc_req::~nest_sched_del_proc_req() {
  SharedDtor();
}

void nest_sched_del_proc_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_sched_del_proc_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_del_proc_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_del_proc_req_descriptor_;
}

const nest_sched_del_proc_req& nest_sched_del_proc_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_del_proc_req* nest_sched_del_proc_req::default_instance_ = NULL;

nest_sched_del_proc_req* nest_sched_del_proc_req::New() const {
  return new nest_sched_del_proc_req;
}

void nest_sched_del_proc_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  proc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_del_proc_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_list;
        break;
      }
      
      // repeated .nest_proc_base proc_list = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_list:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_del_proc_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // repeated .nest_proc_base proc_list = 4;
  for (int i = 0; i < this->proc_list_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proc_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_del_proc_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // repeated .nest_proc_base proc_list = 4;
  for (int i = 0; i < this->proc_list_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proc_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_del_proc_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  // repeated .nest_proc_base proc_list = 4;
  total_size += 1 * this->proc_list_size();
  for (int i = 0; i < this->proc_list_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_del_proc_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_del_proc_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_del_proc_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_del_proc_req::MergeFrom(const nest_sched_del_proc_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_list_.MergeFrom(from.proc_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_del_proc_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_del_proc_req::CopyFrom(const nest_sched_del_proc_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_del_proc_req::IsInitialized() const {
  
  return true;
}

void nest_sched_del_proc_req::Swap(nest_sched_del_proc_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    proc_list_.Swap(&other->proc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_del_proc_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_del_proc_req_descriptor_;
  metadata.reflection = nest_sched_del_proc_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_del_proc_rsp::kTaskIdFieldNumber;
const int nest_sched_del_proc_rsp::kProcListFieldNumber;
#endif  // !_MSC_VER

nest_sched_del_proc_rsp::nest_sched_del_proc_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_del_proc_rsp::InitAsDefaultInstance() {
}

nest_sched_del_proc_rsp::nest_sched_del_proc_rsp(const nest_sched_del_proc_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_del_proc_rsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_del_proc_rsp::~nest_sched_del_proc_rsp() {
  SharedDtor();
}

void nest_sched_del_proc_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_sched_del_proc_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_del_proc_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_del_proc_rsp_descriptor_;
}

const nest_sched_del_proc_rsp& nest_sched_del_proc_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_del_proc_rsp* nest_sched_del_proc_rsp::default_instance_ = NULL;

nest_sched_del_proc_rsp* nest_sched_del_proc_rsp::New() const {
  return new nest_sched_del_proc_rsp;
}

void nest_sched_del_proc_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
  }
  proc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_del_proc_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_list;
        break;
      }
      
      // repeated .nest_proc_base proc_list = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_list:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_del_proc_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // repeated .nest_proc_base proc_list = 4;
  for (int i = 0; i < this->proc_list_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proc_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_del_proc_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // repeated .nest_proc_base proc_list = 4;
  for (int i = 0; i < this->proc_list_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proc_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_del_proc_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
  }
  // repeated .nest_proc_base proc_list = 4;
  total_size += 1 * this->proc_list_size();
  for (int i = 0; i < this->proc_list_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_del_proc_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_del_proc_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_del_proc_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_del_proc_rsp::MergeFrom(const nest_sched_del_proc_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_list_.MergeFrom(from.proc_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_del_proc_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_del_proc_rsp::CopyFrom(const nest_sched_del_proc_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_del_proc_rsp::IsInitialized() const {
  
  return true;
}

void nest_sched_del_proc_rsp::Swap(nest_sched_del_proc_rsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    proc_list_.Swap(&other->proc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_del_proc_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_del_proc_rsp_descriptor_;
  metadata.reflection = nest_sched_del_proc_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_restart_proc_req::kTaskIdFieldNumber;
const int nest_sched_restart_proc_req::kServiceNameFieldNumber;
const int nest_sched_restart_proc_req::kPackageNameFieldNumber;
const int nest_sched_restart_proc_req::kProcConfFieldNumber;
const int nest_sched_restart_proc_req::kProcAllFieldNumber;
#endif  // !_MSC_VER

nest_sched_restart_proc_req::nest_sched_restart_proc_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_restart_proc_req::InitAsDefaultInstance() {
}

nest_sched_restart_proc_req::nest_sched_restart_proc_req(const nest_sched_restart_proc_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_restart_proc_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  proc_all_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_restart_proc_req::~nest_sched_restart_proc_req() {
  SharedDtor();
}

void nest_sched_restart_proc_req::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_restart_proc_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_restart_proc_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_restart_proc_req_descriptor_;
}

const nest_sched_restart_proc_req& nest_sched_restart_proc_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_restart_proc_req* nest_sched_restart_proc_req::default_instance_ = NULL;

nest_sched_restart_proc_req* nest_sched_restart_proc_req::New() const {
  return new nest_sched_restart_proc_req;
}

void nest_sched_restart_proc_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
    proc_all_ = 0u;
  }
  proc_conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_restart_proc_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_conf;
        break;
      }
      
      // repeated .nest_proc_base proc_conf = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_conf:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_conf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_conf;
        if (input->ExpectTag(56)) goto parse_proc_all;
        break;
      }
      
      // optional uint32 proc_all = 7;
      case 7: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_all:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_all_)));
          set_has_proc_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_restart_proc_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      5, this->package_name(), output);
  }
  
  // repeated .nest_proc_base proc_conf = 6;
  for (int i = 0; i < this->proc_conf_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_conf(i), output);
  }
  
  // optional uint32 proc_all = 7;
  if (has_proc_all()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(7, this->proc_all(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_restart_proc_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }
  
  // repeated .nest_proc_base proc_conf = 6;
  for (int i = 0; i < this->proc_conf_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_conf(i), target);
  }
  
  // optional uint32 proc_all = 7;
  if (has_proc_all()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(7, this->proc_all(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_restart_proc_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
    // optional uint32 proc_all = 7;
    if (has_proc_all()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_all());
    }
    
  }
  // repeated .nest_proc_base proc_conf = 6;
  total_size += 1 * this->proc_conf_size();
  for (int i = 0; i < this->proc_conf_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_conf(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_restart_proc_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_restart_proc_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_restart_proc_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_restart_proc_req::MergeFrom(const nest_sched_restart_proc_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_conf_.MergeFrom(from.proc_conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
    if (from.has_proc_all()) {
      set_proc_all(from.proc_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_restart_proc_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_restart_proc_req::CopyFrom(const nest_sched_restart_proc_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_restart_proc_req::IsInitialized() const {
  
  return true;
}

void nest_sched_restart_proc_req::Swap(nest_sched_restart_proc_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(package_name_, other->package_name_);
    proc_conf_.Swap(&other->proc_conf_);
    std::swap(proc_all_, other->proc_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_restart_proc_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_restart_proc_req_descriptor_;
  metadata.reflection = nest_sched_restart_proc_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_restart_proc_rsp::kTaskIdFieldNumber;
const int nest_sched_restart_proc_rsp::kServiceNameFieldNumber;
const int nest_sched_restart_proc_rsp::kPackageNameFieldNumber;
const int nest_sched_restart_proc_rsp::kProcInfoFieldNumber;
#endif  // !_MSC_VER

nest_sched_restart_proc_rsp::nest_sched_restart_proc_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_restart_proc_rsp::InitAsDefaultInstance() {
}

nest_sched_restart_proc_rsp::nest_sched_restart_proc_rsp(const nest_sched_restart_proc_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_restart_proc_rsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_restart_proc_rsp::~nest_sched_restart_proc_rsp() {
  SharedDtor();
}

void nest_sched_restart_proc_rsp::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_restart_proc_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_restart_proc_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_restart_proc_rsp_descriptor_;
}

const nest_sched_restart_proc_rsp& nest_sched_restart_proc_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_restart_proc_rsp* nest_sched_restart_proc_rsp::default_instance_ = NULL;

nest_sched_restart_proc_rsp* nest_sched_restart_proc_rsp::New() const {
  return new nest_sched_restart_proc_rsp;
}

void nest_sched_restart_proc_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
  }
  proc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_restart_proc_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_info;
        break;
      }
      
      // repeated .nest_proc_base proc_info = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_info:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_restart_proc_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      5, this->package_name(), output);
  }
  
  // repeated .nest_proc_base proc_info = 6;
  for (int i = 0; i < this->proc_info_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_restart_proc_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }
  
  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }
  
  // repeated .nest_proc_base proc_info = 6;
  for (int i = 0; i < this->proc_info_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_restart_proc_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
  }
  // repeated .nest_proc_base proc_info = 6;
  total_size += 1 * this->proc_info_size();
  for (int i = 0; i < this->proc_info_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_restart_proc_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_restart_proc_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_restart_proc_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_restart_proc_rsp::MergeFrom(const nest_sched_restart_proc_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_info_.MergeFrom(from.proc_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_restart_proc_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_restart_proc_rsp::CopyFrom(const nest_sched_restart_proc_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_restart_proc_rsp::IsInitialized() const {
  
  return true;
}

void nest_sched_restart_proc_rsp::Swap(nest_sched_restart_proc_rsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(package_name_, other->package_name_);
    proc_info_.Swap(&other->proc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_restart_proc_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_restart_proc_rsp_descriptor_;
  metadata.reflection = nest_sched_restart_proc_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_service_info_req::kTaskIdFieldNumber;
const int nest_sched_service_info_req::kServiceNameFieldNumber;
#endif  // !_MSC_VER

nest_sched_service_info_req::nest_sched_service_info_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_service_info_req::InitAsDefaultInstance() {
}

nest_sched_service_info_req::nest_sched_service_info_req(const nest_sched_service_info_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_service_info_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_service_info_req::~nest_sched_service_info_req() {
  SharedDtor();
}

void nest_sched_service_info_req::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void nest_sched_service_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_service_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_service_info_req_descriptor_;
}

const nest_sched_service_info_req& nest_sched_service_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_service_info_req* nest_sched_service_info_req::default_instance_ = NULL;

nest_sched_service_info_req* nest_sched_service_info_req::New() const {
  return new nest_sched_service_info_req;
}

void nest_sched_service_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_service_info_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_service_info_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      2, this->service_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_service_info_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional string service_name = 2;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_service_info_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional string service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_service_info_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_service_info_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_service_info_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_service_info_req::MergeFrom(const nest_sched_service_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_service_info_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_service_info_req::CopyFrom(const nest_sched_service_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_service_info_req::IsInitialized() const {
  
  return true;
}

void nest_sched_service_info_req::Swap(nest_sched_service_info_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_service_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_service_info_req_descriptor_;
  metadata.reflection = nest_sched_service_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_sched_service_info_rsp::kTaskIdFieldNumber;
const int nest_sched_service_info_rsp::kProcCntFieldNumber;
#endif  // !_MSC_VER

nest_sched_service_info_rsp::nest_sched_service_info_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_sched_service_info_rsp::InitAsDefaultInstance() {
}

nest_sched_service_info_rsp::nest_sched_service_info_rsp(const nest_sched_service_info_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_sched_service_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  proc_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_sched_service_info_rsp::~nest_sched_service_info_rsp() {
  SharedDtor();
}

void nest_sched_service_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_sched_service_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_sched_service_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_sched_service_info_rsp_descriptor_;
}

const nest_sched_service_info_rsp& nest_sched_service_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_sched_service_info_rsp* nest_sched_service_info_rsp::default_instance_ = NULL;

nest_sched_service_info_rsp* nest_sched_service_info_rsp::New() const {
  return new nest_sched_service_info_rsp;
}

void nest_sched_service_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    proc_cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_sched_service_info_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_cnt;
        break;
      }
      
      // optional uint32 proc_cnt = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_cnt:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_cnt_)));
          set_has_proc_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_sched_service_info_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // optional uint32 proc_cnt = 2;
  if (has_proc_cnt()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->proc_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_sched_service_info_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // optional uint32 proc_cnt = 2;
  if (has_proc_cnt()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_sched_service_info_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // optional uint32 proc_cnt = 2;
    if (has_proc_cnt()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_cnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_sched_service_info_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_sched_service_info_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_sched_service_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_sched_service_info_rsp::MergeFrom(const nest_sched_service_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_proc_cnt()) {
      set_proc_cnt(from.proc_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_sched_service_info_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_sched_service_info_rsp::CopyFrom(const nest_sched_service_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_sched_service_info_rsp::IsInitialized() const {
  
  return true;
}

void nest_sched_service_info_rsp::Swap(nest_sched_service_info_rsp* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(proc_cnt_, other->proc_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_sched_service_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_sched_service_info_rsp_descriptor_;
  metadata.reflection = nest_sched_service_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_heartbeat_req::kProcFieldNumber;
const int nest_proc_heartbeat_req::kStateFieldNumber;
const int nest_proc_heartbeat_req::kServiceNameFieldNumber;
const int nest_proc_heartbeat_req::kPackageNameFieldNumber;
#endif  // !_MSC_VER

nest_proc_heartbeat_req::nest_proc_heartbeat_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_heartbeat_req::InitAsDefaultInstance() {
  proc_ = const_cast< ::nest_proc_base*>(&::nest_proc_base::default_instance());
}

nest_proc_heartbeat_req::nest_proc_heartbeat_req(const nest_proc_heartbeat_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_heartbeat_req::SharedCtor() {
  _cached_size_ = 0;
  proc_ = NULL;
  state_ = 0u;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_heartbeat_req::~nest_proc_heartbeat_req() {
  SharedDtor();
}

void nest_proc_heartbeat_req::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
    delete proc_;
  }
}

void nest_proc_heartbeat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_heartbeat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_heartbeat_req_descriptor_;
}

const nest_proc_heartbeat_req& nest_proc_heartbeat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_heartbeat_req* nest_proc_heartbeat_req::default_instance_ = NULL;

nest_proc_heartbeat_req* nest_proc_heartbeat_req::New() const {
  return new nest_proc_heartbeat_req;
}

void nest_proc_heartbeat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proc()) {
      if (proc_ != NULL) proc_->::nest_proc_base::Clear();
    }
    state_ = 0u;
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_heartbeat_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nest_proc_base proc = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_heartbeat_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proc(), output);
  }
  
  // optional uint32 state = 2;
  if (has_state()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      3, this->service_name(), output);
  }
  
  // optional string package_name = 4;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      4, this->package_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_heartbeat_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proc(), target);
  }
  
  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        3, this->service_name(), target);
  }
  
  // optional string package_name = 4;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        4, this->package_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_heartbeat_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .nest_proc_base proc = 1;
    if (has_proc()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proc());
    }
    
    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
    // optional string service_name = 3;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string package_name = 4;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_heartbeat_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_heartbeat_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_heartbeat_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_heartbeat_req::MergeFrom(const nest_proc_heartbeat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc()) {
      mutable_proc()->::nest_proc_base::MergeFrom(from.proc());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_heartbeat_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_heartbeat_req::CopyFrom(const nest_proc_heartbeat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_heartbeat_req::IsInitialized() const {
  
  return true;
}

void nest_proc_heartbeat_req::Swap(nest_proc_heartbeat_req* other) {
  if (other != this) {
    std::swap(proc_, other->proc_);
    std::swap(state_, other->state_);
    std::swap(service_name_, other->service_name_);
    std::swap(package_name_, other->package_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_heartbeat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_heartbeat_req_descriptor_;
  metadata.reflection = nest_proc_heartbeat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_init_req::kProcFieldNumber;
const int nest_proc_init_req::kServiceNameFieldNumber;
const int nest_proc_init_req::kPackageNameFieldNumber;
#endif  // !_MSC_VER

nest_proc_init_req::nest_proc_init_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_init_req::InitAsDefaultInstance() {
  proc_ = const_cast< ::nest_proc_base*>(&::nest_proc_base::default_instance());
}

nest_proc_init_req::nest_proc_init_req(const nest_proc_init_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_init_req::SharedCtor() {
  _cached_size_ = 0;
  proc_ = NULL;
  service_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  package_name_ = const_cast< ::std::string*>(&::google::pb::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_init_req::~nest_proc_init_req() {
  SharedDtor();
}

void nest_proc_init_req::SharedDtor() {
  if (service_name_ != &::google::pb::internal::kEmptyString) {
    delete service_name_;
  }
  if (package_name_ != &::google::pb::internal::kEmptyString) {
    delete package_name_;
  }
  if (this != default_instance_) {
    delete proc_;
  }
}

void nest_proc_init_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_init_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_init_req_descriptor_;
}

const nest_proc_init_req& nest_proc_init_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_init_req* nest_proc_init_req::default_instance_ = NULL;

nest_proc_init_req* nest_proc_init_req::New() const {
  return new nest_proc_init_req;
}

void nest_proc_init_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proc()) {
      if (proc_ != NULL) proc_->::nest_proc_base::Clear();
    }
    if (has_service_name()) {
      if (service_name_ != &::google::pb::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_package_name()) {
      if (package_name_ != &::google::pb::internal::kEmptyString) {
        package_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_init_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nest_proc_base proc = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_package_name;
        break;
      }
      
      // optional string package_name = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_name:
          DO_(::google::pb::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::pb::internal::WireFormat::VerifyUTF8String(
            this->package_name().data(), this->package_name().length(),
            ::google::pb::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_init_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proc(), output);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      3, this->service_name(), output);
  }
  
  // optional string package_name = 4;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    ::google::pb::internal::WireFormatLite::WriteString(
      4, this->package_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_init_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proc(), target);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        3, this->service_name(), target);
  }
  
  // optional string package_name = 4;
  if (has_package_name()) {
    ::google::pb::internal::WireFormat::VerifyUTF8String(
      this->package_name().data(), this->package_name().length(),
      ::google::pb::internal::WireFormat::SERIALIZE);
    target =
      ::google::pb::internal::WireFormatLite::WriteStringToArray(
        4, this->package_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_init_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .nest_proc_base proc = 1;
    if (has_proc()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proc());
    }
    
    // optional string service_name = 3;
    if (has_service_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string package_name = 4;
    if (has_package_name()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::StringSize(
          this->package_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_init_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_init_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_init_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_init_req::MergeFrom(const nest_proc_init_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc()) {
      mutable_proc()->::nest_proc_base::MergeFrom(from.proc());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_package_name()) {
      set_package_name(from.package_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_init_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_init_req::CopyFrom(const nest_proc_init_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_init_req::IsInitialized() const {
  
  return true;
}

void nest_proc_init_req::Swap(nest_proc_init_req* other) {
  if (other != this) {
    std::swap(proc_, other->proc_);
    std::swap(service_name_, other->service_name_);
    std::swap(package_name_, other->package_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_init_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_init_req_descriptor_;
  metadata.reflection = nest_proc_init_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_init_rsp::kProcFieldNumber;
const int nest_proc_init_rsp::kTypeFieldNumber;
#endif  // !_MSC_VER

nest_proc_init_rsp::nest_proc_init_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_init_rsp::InitAsDefaultInstance() {
  proc_ = const_cast< ::nest_proc_base*>(&::nest_proc_base::default_instance());
}

nest_proc_init_rsp::nest_proc_init_rsp(const nest_proc_init_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_init_rsp::SharedCtor() {
  _cached_size_ = 0;
  proc_ = NULL;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_init_rsp::~nest_proc_init_rsp() {
  SharedDtor();
}

void nest_proc_init_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete proc_;
  }
}

void nest_proc_init_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_init_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_init_rsp_descriptor_;
}

const nest_proc_init_rsp& nest_proc_init_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_init_rsp* nest_proc_init_rsp::default_instance_ = NULL;

nest_proc_init_rsp* nest_proc_init_rsp::New() const {
  return new nest_proc_init_rsp;
}

void nest_proc_init_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_proc()) {
      if (proc_ != NULL) proc_->::nest_proc_base::Clear();
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_init_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nest_proc_base proc = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_init_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proc(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_init_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional .nest_proc_base proc = 1;
  if (has_proc()) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proc(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_init_rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .nest_proc_base proc = 1;
    if (has_proc()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proc());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_init_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_init_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_init_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_init_rsp::MergeFrom(const nest_proc_init_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proc()) {
      mutable_proc()->::nest_proc_base::MergeFrom(from.proc());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_init_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_init_rsp::CopyFrom(const nest_proc_init_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_init_rsp::IsInitialized() const {
  
  return true;
}

void nest_proc_init_rsp::Swap(nest_proc_init_rsp* other) {
  if (other != this) {
    std::swap(proc_, other->proc_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_init_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_init_rsp_descriptor_;
  metadata.reflection = nest_proc_init_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_suspend_req::kServiceIdFieldNumber;
const int nest_proc_suspend_req::kProcNoFieldNumber;
const int nest_proc_suspend_req::kProcPidFieldNumber;
#endif  // !_MSC_VER

nest_proc_suspend_req::nest_proc_suspend_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_suspend_req::InitAsDefaultInstance() {
}

nest_proc_suspend_req::nest_proc_suspend_req(const nest_proc_suspend_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_suspend_req::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = 0u;
  proc_no_ = 0u;
  proc_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_suspend_req::~nest_proc_suspend_req() {
  SharedDtor();
}

void nest_proc_suspend_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_proc_suspend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_suspend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_suspend_req_descriptor_;
}

const nest_proc_suspend_req& nest_proc_suspend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_suspend_req* nest_proc_suspend_req::default_instance_ = NULL;

nest_proc_suspend_req* nest_proc_suspend_req::New() const {
  return new nest_proc_suspend_req;
}

void nest_proc_suspend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_id_ = 0u;
    proc_no_ = 0u;
    proc_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_suspend_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_no;
        break;
      }
      
      // optional uint32 proc_no = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_no_)));
          set_has_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proc_pid;
        break;
      }
      
      // optional uint32 proc_pid = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_suspend_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }
  
  // optional uint32 proc_no = 2;
  if (has_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->proc_no(), output);
  }
  
  // optional uint32 proc_pid = 3;
  if (has_proc_pid()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->proc_pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_suspend_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }
  
  // optional uint32 proc_no = 2;
  if (has_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_no(), target);
  }
  
  // optional uint32 proc_pid = 3;
  if (has_proc_pid()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->proc_pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_suspend_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_no = 2;
    if (has_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_no());
    }
    
    // optional uint32 proc_pid = 3;
    if (has_proc_pid()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_suspend_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_suspend_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_suspend_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_suspend_req::MergeFrom(const nest_proc_suspend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_no()) {
      set_proc_no(from.proc_no());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_suspend_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_suspend_req::CopyFrom(const nest_proc_suspend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_suspend_req::IsInitialized() const {
  
  return true;
}

void nest_proc_suspend_req::Swap(nest_proc_suspend_req* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(proc_no_, other->proc_no_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_suspend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_suspend_req_descriptor_;
  metadata.reflection = nest_proc_suspend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_stop_req::kServiceIdFieldNumber;
const int nest_proc_stop_req::kProcNoFieldNumber;
const int nest_proc_stop_req::kProcPidFieldNumber;
#endif  // !_MSC_VER

nest_proc_stop_req::nest_proc_stop_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_stop_req::InitAsDefaultInstance() {
}

nest_proc_stop_req::nest_proc_stop_req(const nest_proc_stop_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_stop_req::SharedCtor() {
  _cached_size_ = 0;
  service_id_ = 0u;
  proc_no_ = 0u;
  proc_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_stop_req::~nest_proc_stop_req() {
  SharedDtor();
}

void nest_proc_stop_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_proc_stop_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_stop_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_stop_req_descriptor_;
}

const nest_proc_stop_req& nest_proc_stop_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_stop_req* nest_proc_stop_req::default_instance_ = NULL;

nest_proc_stop_req* nest_proc_stop_req::New() const {
  return new nest_proc_stop_req;
}

void nest_proc_stop_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_id_ = 0u;
    proc_no_ = 0u;
    proc_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_stop_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_id = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_no;
        break;
      }
      
      // optional uint32 proc_no = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_no:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_no_)));
          set_has_proc_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proc_pid;
        break;
      }
      
      // optional uint32 proc_pid = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_stop_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->service_id(), output);
  }
  
  // optional uint32 proc_no = 2;
  if (has_proc_no()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->proc_no(), output);
  }
  
  // optional uint32 proc_pid = 3;
  if (has_proc_pid()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->proc_pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_stop_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 service_id = 1;
  if (has_service_id()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_id(), target);
  }
  
  // optional uint32 proc_no = 2;
  if (has_proc_no()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_no(), target);
  }
  
  // optional uint32 proc_pid = 3;
  if (has_proc_pid()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->proc_pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_stop_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 service_id = 1;
    if (has_service_id()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }
    
    // optional uint32 proc_no = 2;
    if (has_proc_no()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_no());
    }
    
    // optional uint32 proc_pid = 3;
    if (has_proc_pid()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_stop_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_stop_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_stop_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_stop_req::MergeFrom(const nest_proc_stop_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_proc_no()) {
      set_proc_no(from.proc_no());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_stop_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_stop_req::CopyFrom(const nest_proc_stop_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_stop_req::IsInitialized() const {
  
  return true;
}

void nest_proc_stop_req::Swap(nest_proc_stop_req* other) {
  if (other != this) {
    std::swap(service_id_, other->service_id_);
    std::swap(proc_no_, other->proc_no_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_stop_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_stop_req_descriptor_;
  metadata.reflection = nest_proc_stop_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_proc_stat_report_req::kStatFieldNumber;
#endif  // !_MSC_VER

nest_proc_stat_report_req::nest_proc_stat_report_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_proc_stat_report_req::InitAsDefaultInstance() {
  stat_ = const_cast< ::nest_proc_stat*>(&::nest_proc_stat::default_instance());
}

nest_proc_stat_report_req::nest_proc_stat_report_req(const nest_proc_stat_report_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_proc_stat_report_req::SharedCtor() {
  _cached_size_ = 0;
  stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_proc_stat_report_req::~nest_proc_stat_report_req() {
  SharedDtor();
}

void nest_proc_stat_report_req::SharedDtor() {
  if (this != default_instance_) {
    delete stat_;
  }
}

void nest_proc_stat_report_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_proc_stat_report_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_proc_stat_report_req_descriptor_;
}

const nest_proc_stat_report_req& nest_proc_stat_report_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_proc_stat_report_req* nest_proc_stat_report_req::default_instance_ = NULL;

nest_proc_stat_report_req* nest_proc_stat_report_req::New() const {
  return new nest_proc_stat_report_req;
}

void nest_proc_stat_report_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stat()) {
      if (stat_ != NULL) stat_->::nest_proc_stat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_proc_stat_report_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nest_proc_stat stat = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_proc_stat_report_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional .nest_proc_stat stat = 1;
  if (has_stat()) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_proc_stat_report_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional .nest_proc_stat stat = 1;
  if (has_stat()) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_proc_stat_report_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .nest_proc_stat stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_proc_stat_report_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_proc_stat_report_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_proc_stat_report_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_proc_stat_report_req::MergeFrom(const nest_proc_stat_report_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat()) {
      mutable_stat()->::nest_proc_stat::MergeFrom(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_proc_stat_report_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_proc_stat_report_req::CopyFrom(const nest_proc_stat_report_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_proc_stat_report_req::IsInitialized() const {
  
  return true;
}

void nest_proc_stat_report_req::Swap(nest_proc_stat_report_req* other) {
  if (other != this) {
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_proc_stat_report_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_proc_stat_report_req_descriptor_;
  metadata.reflection = nest_proc_stat_report_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_agent_sysload_req::kCpuNumFieldNumber;
const int nest_agent_sysload_req::kCpuTotalFieldNumber;
const int nest_agent_sysload_req::kCpuLoadFieldNumber;
const int nest_agent_sysload_req::kMemTotalFieldNumber;
const int nest_agent_sysload_req::kMemUsedFieldNumber;
const int nest_agent_sysload_req::kNetTotalFieldNumber;
const int nest_agent_sysload_req::kNetUsedFieldNumber;
const int nest_agent_sysload_req::kStatsFieldNumber;
#endif  // !_MSC_VER

nest_agent_sysload_req::nest_agent_sysload_req()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_agent_sysload_req::InitAsDefaultInstance() {
}

nest_agent_sysload_req::nest_agent_sysload_req(const nest_agent_sysload_req& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_agent_sysload_req::SharedCtor() {
  _cached_size_ = 0;
  cpu_num_ = 0u;
  cpu_total_ = 0u;
  cpu_load_ = 0u;
  mem_total_ = 0u;
  mem_used_ = 0u;
  net_total_ = 0u;
  net_used_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_agent_sysload_req::~nest_agent_sysload_req() {
  SharedDtor();
}

void nest_agent_sysload_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_agent_sysload_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_agent_sysload_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_agent_sysload_req_descriptor_;
}

const nest_agent_sysload_req& nest_agent_sysload_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_agent_sysload_req* nest_agent_sysload_req::default_instance_ = NULL;

nest_agent_sysload_req* nest_agent_sysload_req::New() const {
  return new nest_agent_sysload_req;
}

void nest_agent_sysload_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_num_ = 0u;
    cpu_total_ = 0u;
    cpu_load_ = 0u;
    mem_total_ = 0u;
    mem_used_ = 0u;
    net_total_ = 0u;
    net_used_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_agent_sysload_req::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cpu_num = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_total;
        break;
      }
      
      // optional uint32 cpu_total = 2;
      case 2: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_total:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_total_)));
          set_has_cpu_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cpu_load;
        break;
      }
      
      // optional uint32 cpu_load = 3;
      case 3: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_load:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_load_)));
          set_has_cpu_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mem_total;
        break;
      }
      
      // optional uint32 mem_total = 4;
      case 4: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_total:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_total_)));
          set_has_mem_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_used;
        break;
      }
      
      // optional uint32 mem_used = 5;
      case 5: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_used_)));
          set_has_mem_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_net_total;
        break;
      }
      
      // optional uint32 net_total = 6;
      case 6: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_total:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_total_)));
          set_has_net_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_net_used;
        break;
      }
      
      // optional uint32 net_used = 7;
      case 7: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_used:
          DO_((::google::pb::internal::WireFormatLite::ReadPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_used_)));
          set_has_net_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_stats;
        break;
      }
      
      // repeated .nest_proc_stat stats = 31;
      case 31: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::pb::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_agent_sysload_req::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // optional uint32 cpu_num = 1;
  if (has_cpu_num()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(1, this->cpu_num(), output);
  }
  
  // optional uint32 cpu_total = 2;
  if (has_cpu_total()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(2, this->cpu_total(), output);
  }
  
  // optional uint32 cpu_load = 3;
  if (has_cpu_load()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(3, this->cpu_load(), output);
  }
  
  // optional uint32 mem_total = 4;
  if (has_mem_total()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(4, this->mem_total(), output);
  }
  
  // optional uint32 mem_used = 5;
  if (has_mem_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(5, this->mem_used(), output);
  }
  
  // optional uint32 net_total = 6;
  if (has_net_total()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(6, this->net_total(), output);
  }
  
  // optional uint32 net_used = 7;
  if (has_net_used()) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(7, this->net_used(), output);
  }
  
  // repeated .nest_proc_stat stats = 31;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->stats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_agent_sysload_req::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // optional uint32 cpu_num = 1;
  if (has_cpu_num()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(1, this->cpu_num(), target);
  }
  
  // optional uint32 cpu_total = 2;
  if (has_cpu_total()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_total(), target);
  }
  
  // optional uint32 cpu_load = 3;
  if (has_cpu_load()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(3, this->cpu_load(), target);
  }
  
  // optional uint32 mem_total = 4;
  if (has_mem_total()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(4, this->mem_total(), target);
  }
  
  // optional uint32 mem_used = 5;
  if (has_mem_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(5, this->mem_used(), target);
  }
  
  // optional uint32 net_total = 6;
  if (has_net_total()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(6, this->net_total(), target);
  }
  
  // optional uint32 net_used = 7;
  if (has_net_used()) {
    target = ::google::pb::internal::WireFormatLite::WriteUInt32ToArray(7, this->net_used(), target);
  }
  
  // repeated .nest_proc_stat stats = 31;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->stats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_agent_sysload_req::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cpu_num = 1;
    if (has_cpu_num()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_num());
    }
    
    // optional uint32 cpu_total = 2;
    if (has_cpu_total()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_total());
    }
    
    // optional uint32 cpu_load = 3;
    if (has_cpu_load()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->cpu_load());
    }
    
    // optional uint32 mem_total = 4;
    if (has_mem_total()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->mem_total());
    }
    
    // optional uint32 mem_used = 5;
    if (has_mem_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->mem_used());
    }
    
    // optional uint32 net_total = 6;
    if (has_net_total()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->net_total());
    }
    
    // optional uint32 net_used = 7;
    if (has_net_used()) {
      total_size += 1 +
        ::google::pb::internal::WireFormatLite::UInt32Size(
          this->net_used());
    }
    
  }
  // repeated .nest_proc_stat stats = 31;
  total_size += 2 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::pb::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_agent_sysload_req::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_agent_sysload_req* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_agent_sysload_req*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_agent_sysload_req::MergeFrom(const nest_agent_sysload_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_total()) {
      set_cpu_total(from.cpu_total());
    }
    if (from.has_cpu_load()) {
      set_cpu_load(from.cpu_load());
    }
    if (from.has_mem_total()) {
      set_mem_total(from.mem_total());
    }
    if (from.has_mem_used()) {
      set_mem_used(from.mem_used());
    }
    if (from.has_net_total()) {
      set_net_total(from.net_total());
    }
    if (from.has_net_used()) {
      set_net_used(from.net_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_agent_sysload_req::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_agent_sysload_req::CopyFrom(const nest_agent_sysload_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_agent_sysload_req::IsInitialized() const {
  
  return true;
}

void nest_agent_sysload_req::Swap(nest_agent_sysload_req* other) {
  if (other != this) {
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_total_, other->cpu_total_);
    std::swap(cpu_load_, other->cpu_load_);
    std::swap(mem_total_, other->mem_total_);
    std::swap(mem_used_, other->mem_used_);
    std::swap(net_total_, other->net_total_);
    std::swap(net_used_, other->net_used_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_agent_sysload_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_agent_sysload_req_descriptor_;
  metadata.reflection = nest_agent_sysload_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nest_agent_sysload_rsp::kPidsFieldNumber;
#endif  // !_MSC_VER

nest_agent_sysload_rsp::nest_agent_sysload_rsp()
  : ::google::pb::Message() {
  SharedCtor();
}

void nest_agent_sysload_rsp::InitAsDefaultInstance() {
}

nest_agent_sysload_rsp::nest_agent_sysload_rsp(const nest_agent_sysload_rsp& from)
  : ::google::pb::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nest_agent_sysload_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nest_agent_sysload_rsp::~nest_agent_sysload_rsp() {
  SharedDtor();
}

void nest_agent_sysload_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nest_agent_sysload_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::pb::Descriptor* nest_agent_sysload_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nest_agent_sysload_rsp_descriptor_;
}

const nest_agent_sysload_rsp& nest_agent_sysload_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nest_2eproto();  return *default_instance_;
}

nest_agent_sysload_rsp* nest_agent_sysload_rsp::default_instance_ = NULL;

nest_agent_sysload_rsp* nest_agent_sysload_rsp::New() const {
  return new nest_agent_sysload_rsp;
}

void nest_agent_sysload_rsp::Clear() {
  pids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nest_agent_sysload_rsp::MergePartialFromCodedStream(
    ::google::pb::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::pb::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::pb::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 pids = 1;
      case 1: {
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pids:
          DO_((::google::pb::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_pids())));
        } else if (::google::pb::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::pb::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::pb::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::pb::uint32, ::google::pb::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::pb::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::pb::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::pb::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nest_agent_sysload_rsp::SerializeWithCachedSizes(
    ::google::pb::io::CodedOutputStream* output) const {
  // repeated uint32 pids = 1;
  for (int i = 0; i < this->pids_size(); i++) {
    ::google::pb::internal::WireFormatLite::WriteUInt32(
      1, this->pids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::pb::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::pb::uint8* nest_agent_sysload_rsp::SerializeWithCachedSizesToArray(
    ::google::pb::uint8* target) const {
  // repeated uint32 pids = 1;
  for (int i = 0; i < this->pids_size(); i++) {
    target = ::google::pb::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->pids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::pb::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nest_agent_sysload_rsp::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 pids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pids_size(); i++) {
      data_size += ::google::pb::internal::WireFormatLite::
        UInt32Size(this->pids(i));
    }
    total_size += 1 * this->pids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::pb::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nest_agent_sysload_rsp::MergeFrom(const ::google::pb::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nest_agent_sysload_rsp* source =
    ::google::pb::internal::dynamic_cast_if_available<const nest_agent_sysload_rsp*>(
      &from);
  if (source == NULL) {
    ::google::pb::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nest_agent_sysload_rsp::MergeFrom(const nest_agent_sysload_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pids_.MergeFrom(from.pids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nest_agent_sysload_rsp::CopyFrom(const ::google::pb::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nest_agent_sysload_rsp::CopyFrom(const nest_agent_sysload_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nest_agent_sysload_rsp::IsInitialized() const {
  
  return true;
}

void nest_agent_sysload_rsp::Swap(nest_agent_sysload_rsp* other) {
  if (other != this) {
    pids_.Swap(&other->pids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::pb::Metadata nest_agent_sysload_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::pb::Metadata metadata;
  metadata.descriptor = nest_agent_sysload_rsp_descriptor_;
  metadata.reflection = nest_agent_sysload_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
